{
  "swagger": "2.0",
  "info": {
    "description": "Description of all the REST endpoints exposed by FlexSearch.",
    "version": "1.0.0",
    "title": "FlexSearch REST Services"
  },
  "definitions": {
    "enums": {
      "description": "Container for global enums",
      "type": "object",
      "properties": {
        "shardStatus": {
          "description": "Signifies the Shard status",
          "type": "string",
          "enum": [ "Opening", "Recovering", "Online", "Offline", "Closing", "Faulted" ]
        }
      }
    },
    "operationMessage": {
      "description": "Holds all of the information regarding an error",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The list of key value pairs holding the data of the error",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "The Error message",
          "type": "string"
        },
        "errorCode": {
          "description": "The Error Code",
          "type": "string"
        }
      },
      "required": [ "message", "errorCode" ]
    },
    "analysisRequest": {
      "description": "A request object which can be used to analyze a text input using an analyzer.",
      "type": "object",
      "required": [ "text", "analyzerName" ],
      "properties": {
        "text": {
          "description": "The text to be analyzed by the analyzer.",
          "type": "string"
        },
        "analyzerName": {
          "description": "The name of the analyzer.",
          "type": "string"
        }
      }
    },
    "csvIndexingRequest": {
      "description": "Represents a request which can be sent to CSV connector to index CSV data.",
      "type": "object",
      "properties": {
        "indexName": {
          "description": "Name of the index",
          "type": "string"
        },
        "hasHeaderRecord": {
          "description": "Indicates if the passed CSV file(s) has a header record",
          "type": "boolean",
          "default": false
        },
        "headers": {
          "description": "The headers to be used by each column. This should only be passed when there is\nno header in the csv file. The first column is always assumed to be id field. Make sure\nin your array you always offset the column names by 1 position.",
          "type": "array",
          "items": { "type": "string" }
        },
        "path": {
          "description": "The path of the folder or file to be indexed. The service will pick up all files with .csv extension.",
          "type": "string"
        }
      },
      "required": [ "indexName", "hasHeaderRecord", "path" ]
    },
    "sqlIndexingRequest": {
      "description": "Represents a request which can be sent to Sql connector to index SQL data",
      "type": "object",
      "properties": {
        "indexName": {
          "description": "Name of the index",
          "type": "string"
        },
        "query": {
          "description": "The query to be used to fetch data from Sql server",
          "type": "string"
        },
        "connectionString": {
          "description": "Connection string used to connect to the server",
          "type": "string"
        },
        "forceCreate": {
          "description": "Signifies if all updates to the index are create",
          "type": "boolean",
          "default": true
        },
        "createJob": {
          "description": "Signifies if the connector should create a job for the task and return a jobId which can be used\nto check the status of the job.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [ "indexName", "query", "connectionString" ]
    },
    "duplicateDetectionRequest": {
      "description": "Represents a request to execute dedupe against a given index and search profile",
      "type": "object",
      "properties": {
        "selectionQuery": {
          "description": "The query that filters the records to include in the deduplication",
          "type": "string"
        },
        "fileName": {
          "description": "The file path of the CSV to submit for this session",
          "type": "string"
        },
        "displayName": {
          "description": "The name of the field used to display the results",
          "type": "string"
        },
        "threadCount": {
          "description": "The number of threads on which to run the deduplication.",
          "type": "integer",
          "default": 1
        },
        "indexName": {
          "description": "The name of the index on which to run the session",
          "type": "string"
        },
        "profileName": {
          "description": "The name of the profile used for deduplication.",
          "type": "string"
        },
        "maxRecordsToScan": {
          "description": "The maxmimum number of records to scan for deduplication",
          "type": "integer",
          "default": 500000
        },
        "duplicatesCount": {
          "description": "The maxmimum number of duplicates to include in the result",
          "type": "integer",
          "default": 500000
        }
      },
      "required": [ "displayName", "indexName", "profileName" ]
    },
    "fieldsUpdateRequest": {
      "description": "Represents a request to update a field in an index",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The list of fields containing the new properties",
          "type": "array",
          "items": { "$ref": "#/definitions/field" }
        }
      },
      "required": [ "fields" ]
    },
    "indexStatusResponse": {
      "description": "Represents the response of an Index status request - tells whether an index is online, offline, opening, etc.",
      "type": "object",
      "properties": {
        "indexStatus": {
          "description": "The status of an index",
          "type": "string",
          "enum": [ "Opening", "Recovering", "Online", "OnlineFollower", "Offline", "Closing", "Faulted" ],
          "default": "Opening"
        }
      }
    },
    "tokenizer": {
      "description": "<<tokenizer>>",
      "type": "object",
      "required": [ "tokenizerName" ],
      "properties": {
        "tokenizerName": {
          "description": "Name of the tokenizer",
          "type": "string"
        },
        "parameters": {
          "description": "<<parameters>>",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "filter": {
      "description": "<<filter>>",
      "type": "object",
      "required": [ "filterName" ],
      "properties": {
        "filterName": {
          "description": "Name of the filter",
          "type": "string"
        },
        "parameters": {
          "description": "",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "analyzer": {
      "description": "<<analyzer>>",
      "type": "object",
      "required": [ "analyzerName", "tokenizer" ],
      "properties": {
        "analyzerName": {
          "description": "Name of the analyzer",
          "type": "string"
        },
        "tokenizer": {
          "$ref": "#/definitions/tokenizer"
        },
        "filters": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/filter"
          }
        }
      }
    },
    "shardConfiguration": {
      "description": "Allows to control various Index Shards related settings.",
      "type": "object",
      "properties": {
        "shardCount": {
          "description": "Total number of shards to be present in the given index.",
          "type": "integer",
          "format": "int32",
          "default": 1,
          "minimum": 1,
          "exclusiveMinimum": true
        }
      }
    },
    "indexConfiguration": {
      "description": "Allows to control various Index related settings.",
      "type": "object",
      "properties": {
        "commitTimeSeconds": {
          "description": "The amount of time in seconds that FlexSearch should wait before committing changes to the disk. This is only used if no commits have happened in the set time period otherwise CommitEveryNFlushes takes care of commits",
          "type": "integer",
          "format": "int32",
          "default": 60,
          "minimum": 30
        },
        "commitEveryNFlushes": {
          "description": "Determines how often the data be committed to the physical medium. Commits are more expensive then flushes so keep the setting as high as possible. Making this setting too high will result in excessive ram usage.",
          "type": "integer",
          "format": "int32",
          "default": 3
        },
        "commitOnClose": {
          "description": "Determines whether to commit first before closing an index",
          "type": "boolean",
          "default": true
        },
        "autoCommit": {
          "description": "Determines whether to enable auto commit functionality or not",
          "type": "boolean",
          "default": true
        },
        "directoryType": {
          "description": "A Directory is a flat list of files. Files may be written once, when they are created. Once a file is created it may only be opened for read, or deleted. Random access is permitted both when reading and writing.",
          "type": "string",
          "enum": [ "FileSystem", "MemoryMapped", "Ram" ],
          "default": "MemoryMapped"
        },
        "defaultWriteLockTimeout": {
          "description": "The default maximum time to wait for a write lock (in milliseconds).",
          "type": "integer",
          "format": "int32",
          "default": 1000
        },
        "ramBufferSizeMb": {
          "description": "Determines the amount of RAM that may be used for buffering added documents and deletions before they are flushed to the Directory.",
          "type": "integer",
          "format": "int32",
          "default": 100,
          "minimum": 20
        },
        "maxBufferedDocs": {
          "description": "The number of buffered added documents that will trigger a flush if enabled.",
          "type": "integer",
          "format": "int32",
          "default": 3,
          "minimum": 2
        },
        "refreshTimeMilliseconds": {
          "description": "The amount of time in milliseconds that FlexSearch should wait before reopening index reader. This helps in keeping writing and real time aspects of the engine separate.",
          "type": "integer",
          "format": "int32",
          "default": 500,
          "minimum": 25
        },
        "autoRefresh": {
          "description": "Determines whether to enable auto refresh or not",
          "type": "boolean",
          "default": true
        },
        "indexVersion": {
          "description": "Corresponds to Lucene Index version. There will always be a default codec associated with each index version.",
          "type": "string",
          "enum": [ "Lucene_4_x_x", "Lucene_5_0_0" ],
          "default": "Lucene_5_0_0"
        },
        "useBloomFilterForId": {
          "description": "Signifies if bloom filter should be used for encoding Id field.",
          "type": "boolean",
          "default": true
        },
        "allowReads": {
          "description": "",
          "type": "boolean",
          "default": true
        },
        "allowWrites": {
          "description": "",
          "type": "boolean",
          "default": true
        }
      }
    },
    "field": {
      "description": "<<field>>",
      "type": "object",
      "required": [ "fieldName" ],
      "properties": {
        "allowSort": {
          "description": "",
          "type": "boolean",
          "default": false
        },
        "analyze": {
          "description": "Signifies if the field should be analyzed using an analyzer.",
          "type": "boolean",
          "default": true
        },
        "fieldName": {
          "description": "Name of the field",
          "type": "string"
        },
        "fieldType": {
          "description": "",
          "type": "string",
          "enum": [ "Int", "Double", "ExactText", "Text", "Highlight", "Bool", "Date", "DateTime", "Custom", "Stored", "Long" ],
          "default": "Text"
        },
        "index": {
          "default": true,
          "description": "Signifies if a field should be indexed. A field can only be stored without indexing.",
          "type": "boolean"
        },
        "indexAnalyzer": {
          "description": "",
          "type": "string",
          "default": "standard"
        },
        "indexOptions": {
          "default": "DocsAndFreqsAndPositions",
          "description": "",
          "enum": [ "DocsOnly", "DocsAndFreqs", "DocsAndFreqsAndPositions", "DocsAndFreqsAndPositionsAndOffsets" ],
          "type": "string"
        },
        "omitNorms": {
          "description": "",
          "type": "boolean",
          "default": true
        },
        "scriptName": {
          "description": "",
          "type": "string",
          "default": ""
        },
        "searchAnalyzer": {
          "description": "",
          "type": "string",
          "default": "standard"
        },
        "similarity": {
          "description": "<<similarity>>",
          "type": "string",
          "enum": [ "BM25", "TFIDF" ],
          "default": "TFIDF"
        },
        "store": {
          "description": "",
          "type": "boolean",
          "default": true
        },
        "termVector": {
          "description": "",
          "type": "string",
          "enum": [ "DoNotStoreTermVector", "StoreTermVector", "StoreTermVectorsWithPositions", "StoreTermVectorsWithPositionsandOffsets" ],
          "default": "DoNotStoreTermVector"
        }
      }
    },
    "highlightOption": {
      "description": "Used for configuring the settings for text highlighting in the search results",
      "type": "object",
      "required": [ "highlightedFields" ],
      "properties": {
        "fragmentsToReturn": {
          "description": "Total number of fragments to return per document",
          "type": "integer",
          "format": "int32",
          "default": 2
        },
        "highlightedFields": {
          "description": "The fields to be used for text highlighting",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postTag": {
          "description": "Post tag to represent the ending of the highlighted word",
          "type": "string",
          "default": "</B>"
        },
        "preTag": {
          "description": "Pre tag to represent the ending of the highlighted word",
          "type": "string",
          "default": "<B>"
        }
      }
    },
    "searchQuery": {
      "description": "Search query is used for searching over a FlexSearch index. This provides a consistent syntax to execute various types of queries. The syntax is similar to the SQL syntax. This was done on purpose to reduce the learning curve.",
      "type": "object",
      "required": [ "indexName", "queryString" ],
      "properties": {
        "queryName": {
          "description": "Unique name of the query. This is only required if you are setting up a search profile.",
          "type": "string",
          "default": ""
        },
        "columns": {
          "description": "Columns to be returned as part of results. \n + *  - return all columns \n + [] - return no columns \n + [columnName] -  return specific column",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "count": {
          "description": "Count of results to be returned",
          "type": "integer",
          "format": "int32",
          "default": 10
        },
        "highlights": {
          "$ref": "#/definitions/highlightOption"
        },
        "indexName": {
          "description": "Name of the index",
          "type": "string"
        },
        "orderBy": {
          "description": "Can be used to order the results by score or specific field",
          "type": "string",
          "default": "score"
        },
        "orderByDirection": {
          "description": "Can be used to determine the sort order.",
          "type": "string",
          "enum": [ "Ascending", "Descending" ],
          "default": "Ascending"
        },
        "cutOff": {
          "description": "Can be used to remove results lower than a certain threshold. This works in conjunction with the score of the top record as all the other records are filtered using the score set by the top scoring record.",
          "type": "number",
          "format": "double"
        },
        "distinctBy": {
          "description": "Can be used to return records with distinct values for the given field. Works in a manner similar to Sql distinct by clause.",
          "type": "string",
          "default": ""
        },
        "skip": {
          "description": "Used to enable paging and skip certain pre-fetched results.",
          "type": "integer",
          "minimum": 0,
          "exclusiveMinimum": true
        },
        "queryString": {
          "description": "Query string to be used for searching",
          "type": "string"
        },
        "returnScore": {
          "description": " If true then scores are returned as a part of search result.",
          "type": "boolean",
          "default": true
        },
        "searchProfile": {
          "description": "Profile Name to be used for profile based searching.",
          "type": "string",
          "default": ""
        },
        "searchProfileScript": {
          "description": "Script which can be used to select a search profile. This can help in dynamic selection of search profile based on the incoming data.",
          "type": "string",
          "default": ""
        },
        "overrideProfileOptions": {
          "description": "Can be used to override the configuration saved in the search profile with the one which is passed as the Search Query",
          "type": "boolean",
          "default": false
        },
        "returnEmptyStringForNull": {
          "description": "Returns an empty string for null values saved in the index rather than the null constant",
          "type": "boolean",
          "default": true
        }
      }
    },
    "document": {
      "description": "",
      "type": "object",
      "required": [ "indexName", "id" ],
      "properties": {
        "fields": {
          "description": "",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "",
          "type": "string",
          "minLength": 0
        },
        "indexName": {
          "description": "",
          "type": "string"
        },
        "timeStamp": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "highlights": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "score": {
          "description": "",
          "type": "number",
          "format": "double"
        }
      }
    },
    "index": {
      "description": "",
      "type": "object",
      "required": [ "indexName" ],
      "properties": {
        "indexName": {
          "description": "",
          "type": "string",
          "minLength": 1
        },
        "fields": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/field"
          }
        },
        "searchProfiles": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/searchQuery"
          }
        },
        "shardConfiguration": {
          "$ref": "#/definitions/shardConfiguration"
        },
        "indexConfiguration": {
          "$ref": "#/definitions/indexConfiguration"
        },
        "active": {
          "description": "",
          "type": "boolean",
          "default": true
        }
      }
    },
    "searchResults": {
      "description": "",
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/document"
          }
        },
        "recordsReturned": {
          "type": "integer",
          "format": "int32"
        },
        "bestScore": {
          "type": "number",
          "format": "float"
        },
        "totalAvailable": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "job": {
      "description": "",
      "type": "object",
      "properties": {
        "jobId": {
          "description": "",
          "type": "string"
        },
        "totalItems": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "processedItems": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "failedItems": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "jobStatus": {
          "description": "",
          "type": "string",
          "enum": [ "Initializing", "Initialized", "InProgress", "Completed", "CompletedWithErrors" ]
        },
        "message": {
          "description": "",
          "type": "string"
        }
      }
    },
    "creationId": {
      "description": "",
      "type": "object",
      "required": [ "id" ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        }
      }
    },
    "indexExists": {
      "description": "",
      "type": "object",
      "properties": {
        "exists": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "memoryDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "usedMemory": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "totalMemory": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "usage": {
          "description": "",
          "type": "number",
          "format": "double"
        }
      }
    },
    "searchProfileTestDto": {
      "description": "",
      "type": "object",
      "properties": {
        "searchQuery": {
          "$ref": "#/definitions/searchQuery"
        },
        "searchProfile": {
          "description": "",
          "type": "string"
        }
      }
    },
    "noBody": {
      "description": "",
      "type": "object"
    },
    "response": {
      "type": "object",
      "description": "Base type of an HTTP response containing the Error part",
      "properties": {
        "error": { "$ref": "#/definitions/operationMessage" }
      }
    },
    "analyzeTextResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      ]
    },
    "analyzerResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/analyzer" } }
        }
      ]
    },
    "jobSuccessResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "description": "Gives you the ID of the successfully submitted job",
          "type": "object",
          "properties": { "data": { "type": "string" } }
        }
      ]
    },
    "documentResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/document" } }
        }
      ]
    },
    "searchResultsResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/searchResults" } }
        }
      ]
    },
    "creationIdResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/creationId" } }
        }
      ]
    },
    "indexResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/index" } }
        }
      ]
    },
    "analyzersResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": { "$ref": "#/definitions/analyzer" }
            }
          }
        }
      ]
    },
    "indicesResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": { "$ref": "#/definitions/index" }
            }
          }
        }
      ]
    },
    "indexExistsResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/indexExists" } }
        }
      ]
    },
    "indexSizeResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "type": "number" } }
        }
      ]
    },
    "jobResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/job" } }
        }
      ]
    },
    "memoryDetailsResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/memoryDetails" } }
        }
      ]
    },
    "getStatusResponse": {
      "allOf": [
        { "$ref": "#/definitions/response" },
        {
          "type": "object",
          "properties": { "data": { "$ref": "#/definitions/indexStatusResponse" } }
        }
      ]
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "host": "localhost:9800",
  "paths": {
    "/analyzers/{id}/analyze": {
      "post": {
        "tags": [ "analyzer" ],
        "summary": "Analyze input next",
        "description": "This endpoint is useful to understand the effect of a particular analyser on\nthe input text. You can use the service with both custom and built-in analysers.\nThe returned response contains the tokenised input.\n",
        "operationId": "analyzeText",
        "parameters": [
          {
            "in": "body",
            "description": "Text to analyze",
            "schema": { "$ref": "#/definitions/analysisRequest" },
            "name": "AnalysisRequest",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": { "$ref": "#/definitions/analyzeTextResponse" }
          }
        }
      }
    },
    "/analyzers/{id}": {
      "get": {
        "tags": [ "analyzer" ],
        "summary": "Returns an analyzer by ID",
        "description": "",
        "operationId": "getAnalyzer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Analyzer",
            "schema": { "$ref": "#/definitions/analyzerResponse" }
          }
        }
      },
      "put": {
        "tags": [ "analyzer" ],
        "summary": "Create or update an analyser",
        "description": "",
        "operationId": "createOrUpdateAnalyzer",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/analyzer" },
            "name": "Analyzer",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation"
          }
        }
      },
      "delete": {
        "tags": [ "analyzer" ],
        "summary": "Deletes an analyser by ID",
        "description": "",
        "operationId": "deleteAnalyzer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Analyzer name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/indices/{id}/csv": {
      "post": {
        "tags": [ "common" ],
        "summary": "Connector for importing CSV file data into the system.\n",
        "description": "",
        "operationId": "csv",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/csvIndexingRequest" },
            "name": "CsvIndexingRequest",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "The job ID",
            "schema": { "$ref": "#/definitions/jobSuccessResponse" }
          }
        }
      }
    },
    "/indices/{indexId}/documents/{docId}": {
      "get": {
        "tags": [ "documents", "common" ],
        "summary": "Returns document by ID",
        "description": "",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "indexId",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Document",
            "schema": { "$ref": "#/definitions/documentResponse" }
          }
        }
      },
      "put": {
        "tags": [ "documents", "common" ],
        "summary": "Create or update a document",
        "description": "It is advisable to use create document endpoint when you are sure that the\ndocument does not exist in an index. This service will always perform an ID\nbased look up to determine if a document already exists. In case of non-unique\nID based index, this will replace all the documents with the currently passed\ndocument. This endpoint can be used with concurrency control semantics.\n",
        "operationId": "updateDocument",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/document" },
            "name": "Document",
            "required": true
          },
          {
            "name": "indexId",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      },
      "delete": {
        "tags": [ "documents" ],
        "summary": "Delete a document by ID",
        "description": "In case of non-unique ID field, this will delete all the documents associated\nwith that ID.\n",
        "operationId": "deleteDocument",
        "parameters": [
          {
            "name": "indexId",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "docId",
            "in": "path",
            "description": "Document ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/indices/{indexName}/search": {
      "get": {
        "tags": [ "search" ],
        "summary": "Search and index",
        "description": "Search across the index for documents using SQL like query syntax.\n\n<div class= \"note\">\nAny parameter passed as part of query string takes precedence over the same\nparameter in the request body.\n</div>\n\nRefer to the search DSL section to learn more about FlexSearch's querying capability.\n",
        "operationId": "getSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Short hand for 'QueryString'.",
            "type": "string"
          },
          {
            "name": "c",
            "in": "query",
            "description": "Columns to be retrieved. Use * to retrieve all columns.",
            "type": "integer"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Order by parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "orderbydirection",
            "in": "query",
            "description": "Order by Direction parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/searchResultsResponse" }
          }
        }
      },
      "post": {
        "tags": [ "search" ],
        "summary": "Search and index",
        "description": "Search across the index for documents using SQL like query syntax.\n\n<div class= \"note\">\nAny parameter passed as part of query string takes precedence over the same\nparameter in the request body.\n</div>\n\nRefer to the search DSL section to learn more about FlexSearch's querying capability.\n",
        "operationId": "postSearch",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/searchQuery" },
            "name": "SearchQuery",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/searchResultsResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "search" ],
        "summary": "Deletes document by query",
        "description": "Deletes all document returned by the search query for the given index. Returns the records identified\nby the search query.",
        "operationId": "deleteDocumentsFromSearch",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Short hand for 'QueryString'.",
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Count parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip parameter. Refer to 'Search Query' properties.",
            "type": "integer"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Order by parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "orderbydirection",
            "in": "query",
            "description": "Order by Direction parameter. Refer to 'Search Query' properties.",
            "type": "string"
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/searchResultsResponse" }
          }
        }
      }
    },
    "/indices/{id}/documents": {
      "get": {
        "tags": [ "documents" ],
        "summary": "Returns top 10 document from the index",
        "description": "This endpoint is useful to determine the structure of the documents indexed. At\ntimes it is quicker to get the count of all the documents present in the index\nusing the service rather then using the search API.\n",
        "operationId": "getDocuments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "SearchResults",
            "schema": { "$ref": "#/definitions/searchResultsResponse" }
          }
        }
      },
      "post": {
        "tags": [ "documents", "common" ],
        "summary": "Creates a new document",
        "description": "Unlike a database system FlexSearch doesn't impose the requirement of a unique\nID per document. You can add multiple documents by the same ID but this can\nimpose a problem while adding or retrieving them. You can enforce a unique ID\ncheck by using the `timestamp` field. To understand more about ID check and\nconcurrency control, please refer to the article `concurrency control` under\nconcepts section.\n",
        "operationId": "createDocument",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/document" },
            "name": "Document",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "CreateResponse",
            "schema": { "$ref": "#/definitions/creationIdResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "documents", "common" ],
        "summary": "Deletes all documents present in the index",
        "description": "This will remove all the documents present in an index. This is useful when you\nwant to reindex all the documents.\n",
        "operationId": "deleteDocuments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response"
          }
        }
      }
    },
    "/indices/{id}": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Returns an index by the ID",
        "description": "This service will return a status of 404 when index is not present on the server.\n",
        "operationId": "getIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Index",
            "schema": { "$ref": "#/definitions/indexResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "indices", "common" ],
        "summary": "Deletes an index by ID",
        "description": "Index deletion happens in two parts, first the index configuration file is\ndeleted from the configurations folder, then the index is deleted from the data\nfolder. In case any error is encountered the cleanup will be performed on the\nserver restart.\n",
        "operationId": "deleteIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      }
    },
    "/indices/{indexName}/duplicatedetection/{profileName}": {
      "post": {
        "tags": [ "common" ],
        "summary": "Duplicate Detection Handler\n",
        "description": "",
        "operationId": "duplicateDetection",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/duplicateDetectionRequest" },
            "name": "DuplicateDetectionRequest",
            "required": true
          },
          {
            "name": "indexName",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          },
          {
            "name": "profileName",
            "in": "path",
            "description": "Profile name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Job ID",
            "schema": { "$ref": "#/definitions/jobSuccessResponse" }
          }
        }
      }
    },
    "/analyzers": {
      "get": {
        "tags": [ "analyzer" ],
        "summary": "Returns all analysers",
        "description": "",
        "operationId": "getAllAnalyzer",
        "responses": {
          "default": {
            "description": "All Analyzers",
            "schema": { "$ref": "#/definitions/analyzersResponse" }
          }
        }
      }
    },
    "/indices": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Returns all the indexes",
        "description": "",
        "operationId": "getAllIndex",
        "responses": {
          "default": {
            "description": "All indices",
            "schema": { "$ref": "#/definitions/indicesResponse" }
          }
        }
      },
      "post": {
        "tags": [ "common", "indices" ],
        "summary": "Create a new index",
        "description": "",
        "operationId": "createIndex",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/index" },
            "name": "Index",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "CreateResponse",
            "schema": { "$ref": "#/definitions/creationIdResponse" }
          }
        }
      }
    },
    "/indices/{id}/exists": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Check if an index exists",
        "description": "This endpoint can be used to check if an index is present in the system. This\nendpoint is a lighter alternative to accessing the index by an ID as the\nresponse is smaller in size.\n",
        "operationId": "indexExists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "IndexExistsResponse",
            "schema": { "$ref": "#/definitions/indexExistsResponse" }
          }
        }
      }
    },
    "/favicon.ico": {
      "get": {
        "tags": [ "server" ],
        "summary": "Returns favourite icon",
        "description": "An internal end point which is used to return favourite icon when it is\nrequested by a web browser.\n",
        "operationId": "getFavicon",
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "type": "file" }
          }
        }
      }
    },
    "/indices/{id}/size": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Returns the size of an index",
        "description": "The return size may be higher than the actual size of the documents present in\nthe index. The return value includes the space occupied by the transaction logs\nand older segment files which are not cleaned up as part of the last comment.\n",
        "operationId": "getIndexSize",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Index size in bytes",
            "schema": { "$ref": "#/definitions/indexSizeResponse" }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "tags": [ "jobs" ],
        "summary": "Returns job information",
        "description": "",
        "operationId": "getJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Job ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Job",
            "schema": { "$ref": "#/definitions/jobResponse" }
          }
        }
      }
    },
    "/memory": {
      "get": {
        "tags": [ "server" ],
        "summary": "Returns memory used by the server",
        "description": "",
        "operationId": "getMemoryDetails",
        "responses": {
          "default": {
            "description": "MemoryDetailsResponse",
            "schema": { "$ref": "#/definitions/memoryDetailsResponse" }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [ "server" ],
        "summary": "Redirect requests from base URL",
        "description": "An internal endpoint which is used to redirect requests to the root URL to the\nFlexSearch portal.\n",
        "operationId": "getRoot",
        "responses": {
          "default": {
            "description": "Successful response"
          }
        }
      }
    },
    "/indices/{id}/status": {
      "get": {
        "tags": [ "indices" ],
        "summary": "Returns the status of an index",
        "description": "This endpoint can be used to determine if an index is online or off-line.\n",
        "operationId": "getStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "IndexStatusResponse",
            "schema": { "$ref": "#/definitions/getStatusResponse" }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [ "server" ],
        "summary": "Ping server",
        "description": "A simple endpoint which can be used to check the server is running. This is\nuseful for checking the status of the server from a load balancer or fire-wall.\n",
        "operationId": "ping",
        "responses": {
          "default": {
            "description": "Pong"
          }
        }
      }
    },
    "/indices/{id}/searchprofiletest": {
      "post": {
        "tags": [ "search" ],
        "summary": "Test a search profile",
        "description": "This endpoint is useful to test such profiles dynamically, you can test search\nprofiles without adding them to the index. This becomes useful when trying out\ndifferent search profiles. It is advisable to not to use this service directly\nbut through the search UI provided as part of the portal.\n",
        "operationId": "doSearchProfileTest",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/searchProfileTestDto" },
            "name": "SearchProfileTestDto",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/searchResultsResponse" }
          }
        }
      }
    },
    "/indices/{id}/configuration": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Update the configuration of an index",
        "description": "<div class=\"important\">\nThe Index Version cannot be modified\n</div>\n",
        "operationId": "updateIndexConfiguration",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/indexConfiguration" },
            "name": "IndexConfiguration",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      }
    },
    "/indices/{id}/fields": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Update the Index Fields",
        "description": "Any analyser which is to be used as part of an index field should be defined\nbefore adding the field to the index.\n\n<div class=\"note\">\nAlways reindex the data after a field update, otherwise you may get unexpected\nresults.\n</div>\n\n<div class=\"important\">\nNew fields added as part of fields update will not have any data available for\nthe older records, in such cases if the indexing is not done the engine will use\ndefault values for the field type. If an existing field is removed then the data\nassociated with that field will not be accessible even though the data will not\nbe removed from the index itself.\n</div>\n",
        "operationId": "updateIndexFields",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/fieldsUpdateRequest" },
            "name": "FieldsUpdateRequest",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      }
    },
    "/indices/{id}/searchprofile": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Adds or updates a search profile for the given index",
        "description": "",
        "operationId": "updateIndexSearchProfile",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/searchQuery" },
            "name": "SearchQuery",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      }
    },
    "/indices/{indexName}/status/{status}": {
      "put": {
        "tags": [ "indices" ],
        "summary": "Update the status of an index",
        "description": "This endpoint can be used to set an index online or off-line.\n",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "indexName",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "description": "offline / online",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      }
    },
    "/setupdemo": {
      "put": {
        "tags": [ "server" ],
        "summary": "Setup a demo index",
        "description": "This endpoint if useful for setting up a demo index which can be used to explore\nthe capabilities of FlexSearch. This is an in memory index which gets wiped out\non server restart.\n",
        "operationId": "setupDemo",
        "parameters": [ ],
        "responses": {
          "default": {
            "description": "Successful response",
            "schema": { "$ref": "#/definitions/response" }
          }
        }
      }
    },
    "/indices/{id}/sql": {
      "post": {
        "tags": [ "common" ],
        "summary": "Connector for importing data from Microsoft SQL into the system.\n",
        "description": "",
        "operationId": "sql",
        "parameters": [
          {
            "in": "body",
            "schema": { "$ref": "#/definitions/sqlIndexingRequest" },
            "name": "SqlIndexingRequest",
            "description": "The SQL request",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Index Name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "The job ID",
            "schema": { "$ref": "#/definitions/jobSuccessResponse" }
          }
        }
      }
    }
  },
  "tags": [
    { "name": "All" },
    { "name": "analyzer" },
    { "name": "common" },
    { "name": "documents" },
    { "name": "search" },
    { "name": "indices" },
    { "name": "server" },
    { "name": "jobs" }
  ]
}
