using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using {{packageName}}.Client;
{{#hasImport}}using {{packageName}}.Model;
{{/hasImport}}

namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface I{{classname}}
    {
        {{#operation}}
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
        {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}} ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
  
        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}> {{operationId}}WithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>Task of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#returnType}}System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

        /// <summary>
        /// {{summary}}
        /// </summary>
        /// <remarks>
        /// {{notes}}
        /// </remarks>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>Task of ApiResponse{{#returnType}} ({{returnType}}){{/returnType}}</returns>
        System.Threading.Tasks.Task<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>> {{operationId}}AsyncWithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        {{/operation}}
    }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class {{classname}} : I{{classname}}
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class.
        /// </summary>
        /// <returns></returns>
        public {{classname}}(String basePath)
        {
            this.ApiClient = new ApiClient(basePath);
        }
    
        /// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}"/> class
        /// using ApiClient object
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient</param>
        /// <returns></returns>
        public {{classname}}(ApiClient apiClient = null)
        {
            this.ApiClient = apiClient ?? new ApiClient();
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.ApiClient.BaseAddress.ToString();
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient ApiClient {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public HttpRequestHeaders DefaultHeader()
        {
            return this.ApiClient.DefaultRequestHeaders;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.ApiClient.DefaultRequestHeaders.Add(key, value);
        }
   
        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param> 
        {{/allParams}}/// <returns>{{#returnType}}{{returnType}}{{/returnType}}</returns>
        public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{operationId}} ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
             {{#returnType}}ApiResponse<{{{returnType}}}> response = {{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
             return response.Data;{{/returnType}}{{^returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{/returnType}}
        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param> 
        {{/allParams}}/// <returns>ApiResponse of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Object(void){{/returnType}}</returns>
        public ApiResponse<{{#returnType}} {{{returnType}}} {{/returnType}}{{^returnType}}Object{{/returnType}}> {{operationId}}WithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#allParams}}{{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{operationId}}");
            {{/required}}{{/allParams}}
    
            var path_ = "{{path}}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>(ApiClient.DefaultRequestHeaders.ToDictionary(x => x.Key, x => String.Join(";", x.Value)));
            var formParams = new Dictionary<String, String>();

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            {{#pathParams}}if ({{paramName}} != null) pathParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // path parameter
            {{/pathParams}}
            {{#queryParams}}if ({{paramName}} != null) queryParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // query parameter
            {{/queryParams}}
            {{#headerParams}}if ({{paramName}} != null) headerParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // header parameter
            {{/headerParams}}
            {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", ApiClient.ParameterToFile("{{baseName}}", {{paramName}}));{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
            {{/formParams}}

            {{#authMethods}}
            // authentication ({{name}}) required
            {{#isApiKey}}{{#isKeyInHeader}}
            var apiKeyValue = Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            if (!String.IsNullOrEmpty(apiKeyValue))
            {
                headerParams["{{keyParamName}}"] = apiKeyValue;
            }{{/isKeyInHeader}}{{#isKeyInQuery}}
            var apiKeyValue = Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            if (!String.IsNullOrEmpty(apiKeyValue))
            {
                queryParams["{{keyParamName}}"] = apiKeyValue;
            }{{/isKeyInQuery}}{{/isApiKey}}{{#isBasic}}
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                headerParams["Authorization"] = "Basic " + Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }{{/isBasic}}{{#isOAuth}}
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                headerParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }{{/isOAuth}}
            {{/authMethods}}
    
            // make the HTTP request
            return ApiClient.CallApi<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^bodyParam}}Object{{/bodyParam}},{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>(path_, FsHttpMethod.{{httpMethod}}, queryParams, {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams, pathParams);
        }
    
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>Task of {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}</returns>
        {{#returnType}}public async System.Threading.Tasks.Task<{{{returnType}}}>{{/returnType}}{{^returnType}}public async System.Threading.Tasks.Task{{/returnType}} {{operationId}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
             {{#returnType}}ApiResponse<{{{returnType}}}> response = await {{operationId}}AsyncWithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
             return response.Data;{{/returnType}}{{^returnType}}await {{operationId}}AsyncWithHttpInfo({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});{{/returnType}}

        }

        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>
        {{/allParams}}/// <returns>Task of ApiResponse{{#returnType}} ({{returnType}}){{/returnType}}</returns>
        public async System.Threading.Tasks.Task<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>> {{operationId}}AsyncWithHttpInfo ({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = null{{/optionalMethodArgument}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        {
            {{#allParams}}{{#required}}
            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{operationId}}");
            {{/required}}{{/allParams}}
    
            var path_ = "{{path}}";
    
            var pathParams = new Dictionary<String, String>();
            var queryParams = new Dictionary<String, String>();
            var headerParams = new Dictionary<String, String>(ApiClient.DefaultRequestHeaders.ToDictionary(x => x.Key, x => String.Join(";", x.Value)));
            var formParams = new Dictionary<String, String>();

            // to determine the Accept header
            String[] http_header_accepts = new String[] {
                {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}
            };
            String http_header_accept = ApiClient.SelectHeaderAccept(http_header_accepts);
            if (http_header_accept != null)
                headerParams.Add("Accept", ApiClient.SelectHeaderAccept(http_header_accepts));

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            pathParams.Add("format", "json");
            {{#pathParams}}if ({{paramName}} != null) pathParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // path parameter
            {{/pathParams}}
            {{#queryParams}}if ({{paramName}} != null) queryParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // query parameter
            {{/queryParams}}
            {{#headerParams}}if ({{paramName}} != null) headerParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // header parameter
            {{/headerParams}}
            {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", ApiClient.ParameterToFile("{{baseName}}", {{paramName}}));{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", ApiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
            {{/formParams}}

            {{#authMethods}}
            // authentication ({{name}}) required
            {{#isApiKey}}{{#isKeyInHeader}}
            var apiKeyValue = Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            if (!String.IsNullOrEmpty(apiKeyValue))
            {
                headerParams["{{keyParamName}}"] = apiKeyValue;
            }{{/isKeyInHeader}}{{#isKeyInQuery}}
            var apiKeyValue = Configuration.GetApiKeyWithPrefix("{{keyParamName}}");
            if (!String.IsNullOrEmpty(apiKeyValue))
            {
                queryParams["{{keyParamName}}"] = apiKeyValue;
            }{{/isKeyInQuery}}{{/isApiKey}}{{#isBasic}}
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                headerParams["Authorization"] = "Basic " + Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }{{/isBasic}}{{#isOAuth}}
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                headerParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }{{/isOAuth}}
            {{/authMethods}}
    
            // make the HTTP request
            return await ApiClient.CallApiAsync<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^bodyParam}}Object{{/bodyParam}},{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Object{{/returnType}}>(path_, FsHttpMethod.{{httpMethod}}, queryParams, {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, headerParams, pathParams);
        }
        {{/operation}}
    }
    {{/operations}}
}
