// AUTOGENERATED CODE: GENERATED FOR FLEXSEARCH PROJECT. MODIFYING THIS CODE DIRECTLY
// WILL HAVE UNINTENDED EFFECTS.

using FlexSearch.Api.Constants;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
{{#models}}
{{#model}}
namespace FlexSearch.Api.Constants
{
{{#vars}}
{{#isEnum}}
	public enum {{name}} {
    {{#allowableValues}}
        {{#values}}{{this}}{{^-last}}, {{/-last}}{{/values}}
    {{/allowableValues}}
	}
{{/isEnum}}
{{/vars}}
}

namespace FlexSearch.Api.Models
{
    /// <summary>
    /// {{description}}
    /// </summary>
    [DataContract]
    public partial class {{classname}} : IDataTransferObject, IEquatable<{{classname}}>{{#parent}}, {{{parent}}}{{/parent}}
    {	
		/// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        public {{classname}}()
        {		
        }
		
		{{#mandatory}}{{#-first}}
		/// <summary>
        /// Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
		{{#vars}}{{#required}}/// <param name="{{baseName}}">{{description}}</param>
		{{/required}}{{/vars}}
		public {{classname}}({{#vars}}{{#required}}{{{datatype}}} {{baseName}}{{^-last}}, {{/-last}}{{/required}}{{/vars}})
        {
			{{#vars}}{{#required}}
            this.{{name}} = {{baseName}};
			{{/required}}{{/vars}}						
        }
		{{/-first}}{{/mandatory}}        
        {{#vars}}
		{{> model-property}}
        {{/vars}}    
        
        /// <summary>
        /// Represents if the object is validated or not.
        /// </summary>
        [JsonIgnore]
        public bool Validated { get; private set; } = false;

        /// <summary>
        /// Description of the error raised by the field
        /// </summary>
        [JsonIgnore]
        public string ErrorDescription { get; protected set; } = String.Empty;

        /// <summary>
        /// Name of the field in error
        /// </summary>
        [JsonIgnore]
        public string ErrorField { get; protected set; } = String.Empty;       
        
        /// <summary>
        /// Validate the object
        /// </summary>
        /// <returns>Returns the result of the validation</returns>
        public bool Validate() {
            if (this.Validated) {
                return this.ErrorDescription == String.Empty;
            }
            this.Validated = true;
            {{#vars}}
            {{#required}}
            if (this.{{name}} == null) {
                this.ErrorField = "{{name}}";
                this.ErrorDescription = "A required field cannot be null. ";
                return false;
            }
            {{/required}}

            {{#minimum}}
            if (this.{{name}} {{^exclusiveMinimum}} <= {{/exclusiveMinimum}}{{#exclusiveMinimum}} < {{/exclusiveMinimum}} {{minimum}}) {
                this.ErrorField = "{{name}}";
                this.ErrorDescription = "The field value should be greater than {{#exclusiveMinimum}}or equal to{{/exclusiveMinimum}} {{minimum}}. ";
                return false;
            }
            {{/minimum}}
            
            {{#maximum}}
            if (this.{{name}} {{^exclusiveMaximum}} >= {{/exclusiveMaximum}}{{#exclusiveMaximum}} > {{/exclusiveMaximum}} {{minimum}}) {
                this.ErrorField = "{{name}}";
                this.ErrorDescription = "The field value should be less than {{#exclusiveMaximum}}or equal to{{/exclusiveMaximum}} {{minimum}}. ";
                return false;
            }
            {{/maximum}}
                        
            {{^isPrimitiveType}}
            {{#isNotContainer}}
            if (!this.{{name}}.Validate()){
                this.ErrorField = "{{name}}";
                this.ErrorDescription = "The field {{name}} is not in a valid state. Subfield name: " + this.{{name}}.ErrorField + " Subfield error: " + this.{{name}}.ErrorDescription;
                return false;
            }
            {{/isNotContainer}}
            {{#isContainer}}
            foreach(var a in this.{{name}}){
                if(!a.Validate()){
                    this.ErrorField = "{{name}}";
                    this.ErrorDescription = "An item of the field {{name}} is not in a valid state. Subfield name: " + a.ErrorField + " Subfield error: " + a.ErrorDescription;
                    return false;
                }
            }
            {{/isContainer}}
            {{/isPrimitiveType}}

            {{/vars}}
            return true;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            {{#vars}}sb.Append("  {{name}}: ").Append({{name}}).Append("\n");
            {{/vars}}
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as {{classname}});
        }

        /// <summary>
        /// Returns true if {{classname}} instances are equal
        /// </summary>
        /// <param name="obj">Instance of {{classname}} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{classname}} other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return {{#vars}}{{#isNotContainer}}
                (
                    this.{{name}} == other.{{name}} ||
                    this.{{name}} != null &&
                    this.{{name}}.Equals(other.{{name}})
                ){{#hasMore}} && {{/hasMore}}{{/isNotContainer}}{{^isNotContainer}}
                (
                    this.{{name}} == other.{{name}} ||
                    this.{{name}} != null &&
                    this.{{name}}.SequenceEqual(other.{{name}})
                ){{#hasMore}} && {{/hasMore}}{{/isNotContainer}}{{/vars}}{{^vars}}false{{/vars}};
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                {{#vars}}
                if (this.{{name}} != null)
                    hash = hash * 57 + this.{{name}}.GetHashCode();
                {{/vars}}
                return hash;
            }
        }

        /// <summary>
        /// Returns the prettified JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public {{#parent}} new {{/parent}}string ToPrettyJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public {{#parent}} new {{/parent}}string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.None);
        }

        /// <summary>
        /// Returns the object from the Json string
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public static {{classname}} FromJson(string input) {
            return JsonConvert.DeserializeObject<{{classname}}>(input);
        }
        
        /// Constants for the field name
        {{#vars}}
        private static readonly string {{name}}_IndexName = "{{name}}".ToLower();
        private static readonly string {{name}}_DataType = "{{{datatype}}}".ToLower();
        {{/vars}}

        /// <summary>
        /// Returns a FlexSearch object for the object
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        public Document ToFlexDocument(string id, string indexName) {
            var doc = new Document(id, indexName);
            {{#vars}}
            {{#isNotContainer}}
            doc.Fields.Add({{name}}_IndexName, this.{{name}}.ToString()); //{{datatype}}
            {{/isNotContainer}}
            {{^isNotContainer}}
            doc.Fields.Add({{name}}_IndexName, JsonConvert.SerializeObject(this.{{name}}, Formatting.None));
            {{/isNotContainer}}
            {{/vars}}
            return doc;
        }
        
        /// <summary>
        /// Returns the FlexSearch Index Fields for the given type
        /// </summary>
        /// <returns></returns>
        public static Field[] GetIndexFields() {
            var fields = new List <Field>();
            {{#vars}}
            fields.Add(new Field({{name}}_IndexName, Helpers.GetFieldType({{name}}_DataType)));
            {{/vars}}
            return fields.ToArray();
        }
    }
    {{/model}}
    {{/models}}
}
