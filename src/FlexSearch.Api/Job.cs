/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class Job : TBase
  {
    private int _TotalItems;
    private int _ProcessedItems;
    private int _FailedItems;
    private string _Message;

    [DataMember]
    public string JobId { get; set; }

    [DataMember]
    public int TotalItems
    {
      get
      {
        return _TotalItems;
      }
      set
      {
        __isset.TotalItems = true;
        this._TotalItems = value;
      }
    }

    [DataMember]
    public int ProcessedItems
    {
      get
      {
        return _ProcessedItems;
      }
      set
      {
        __isset.ProcessedItems = true;
        this._ProcessedItems = value;
      }
    }

    [DataMember]
    public int FailedItems
    {
      get
      {
        return _FailedItems;
      }
      set
      {
        __isset.FailedItems = true;
        this._FailedItems = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="JobStatus"/>
    /// </summary>
    [DataMember]
    public JobStatus Status { get; set; }

    [DataMember]
    public string Message
    {
      get
      {
        return _Message;
      }
      set
      {
        __isset.Message = true;
        this._Message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool TotalItems;
      public bool ProcessedItems;
      public bool FailedItems;
      public bool Message;
    }

    public Job() {
      this.Status = JobStatus.Initializing;
    }

    public Job(string JobId, JobStatus Status) : this() {
      this.JobId = JobId;
      this.Status = Status;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_JobId = false;
      bool isset_Status = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              JobId = iprot.ReadString();
              isset_JobId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TotalItems = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ProcessedItems = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              FailedItems = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Status = (JobStatus)iprot.ReadI32();
              isset_Status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_JobId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Status)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Job");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "JobId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(JobId);
      oprot.WriteFieldEnd();
      if (__isset.TotalItems) {
        field.Name = "TotalItems";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalItems);
        oprot.WriteFieldEnd();
      }
      if (__isset.ProcessedItems) {
        field.Name = "ProcessedItems";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ProcessedItems);
        oprot.WriteFieldEnd();
      }
      if (__isset.FailedItems) {
        field.Name = "FailedItems";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FailedItems);
        oprot.WriteFieldEnd();
      }
      field.Name = "Status";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Status);
      oprot.WriteFieldEnd();
      if (Message != null && __isset.Message) {
        field.Name = "Message";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as Job;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(JobId, other.JobId)
        && ((__isset.TotalItems == other.__isset.TotalItems) && ((!__isset.TotalItems) || (System.Object.Equals(TotalItems, other.TotalItems))))
        && ((__isset.ProcessedItems == other.__isset.ProcessedItems) && ((!__isset.ProcessedItems) || (System.Object.Equals(ProcessedItems, other.ProcessedItems))))
        && ((__isset.FailedItems == other.__isset.FailedItems) && ((!__isset.FailedItems) || (System.Object.Equals(FailedItems, other.FailedItems))))
        && System.Object.Equals(Status, other.Status)
        && ((__isset.Message == other.__isset.Message) && ((!__isset.Message) || (System.Object.Equals(Message, other.Message))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((JobId.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.TotalItems ? 0 : (TotalItems.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.ProcessedItems ? 0 : (ProcessedItems.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.FailedItems ? 0 : (FailedItems.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((Status.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Message ? 0 : (Message.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Job(");
      sb.Append("JobId: ");
      sb.Append(JobId);
      sb.Append(",TotalItems: ");
      sb.Append(TotalItems);
      sb.Append(",ProcessedItems: ");
      sb.Append(ProcessedItems);
      sb.Append(",FailedItems: ");
      sb.Append(FailedItems);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",Message: ");
      sb.Append(Message);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
