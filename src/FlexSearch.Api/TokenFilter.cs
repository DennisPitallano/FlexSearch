/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class TokenFilter : TBase
  {
    private Dictionary<string, string> _Parameters;

    [DataMember]
    public string FilterName { get; set; }

    [DataMember]
    public Dictionary<string, string> Parameters
    {
      get
      {
        return _Parameters;
      }
      set
      {
        __isset.Parameters = true;
        this._Parameters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool Parameters;
    }

    public TokenFilter() {
    }

    public TokenFilter(string FilterName) : this() {
      this.FilterName = FilterName;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_FilterName = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              FilterName = iprot.ReadString();
              isset_FilterName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Parameters = new Dictionary<string, string>();
                TMap _map8 = iprot.ReadMapBegin();
                for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                {
                  string _key10;
                  string _val11;
                  _key10 = iprot.ReadString();
                  _val11 = iprot.ReadString();
                  Parameters[_key10] = _val11;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_FilterName)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TokenFilter");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "FilterName";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FilterName);
      oprot.WriteFieldEnd();
      if (Parameters != null && __isset.Parameters) {
        field.Name = "Parameters";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
          foreach (string _iter12 in Parameters.Keys)
          {
            oprot.WriteString(_iter12);
            oprot.WriteString(Parameters[_iter12]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as TokenFilter;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(FilterName, other.FilterName)
        && ((__isset.Parameters == other.__isset.Parameters) && ((!__isset.Parameters) || (TCollections.Equals(Parameters, other.Parameters))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((FilterName.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Parameters ? 0 : (TCollections.GetHashCode(Parameters)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TokenFilter(");
      sb.Append("FilterName: ");
      sb.Append(FilterName);
      sb.Append(",Parameters: ");
      sb.Append(Parameters);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
