/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{
    using System.ServiceModel;

    public partial class FlexSearchService {
    [ServiceContract(Namespace="")]
    public interface Iface {
      [OperationContract]
      VoteResponse RequestVoteForClusterMaster(int term, string candidateId);
      IAsyncResult Begin_RequestVoteForClusterMaster(AsyncCallback callback, object state, int term, string candidateId);
      VoteResponse End_RequestVoteForClusterMaster(IAsyncResult asyncResult);
      Task<VoteResponse> RequestVoteForClusterMasterAsync(int term, string candidateId);
      [OperationContract]
      List<Index> GetAllIndexSettings();
      IAsyncResult Begin_GetAllIndexSettings(AsyncCallback callback, object state);
      List<Index> End_GetAllIndexSettings(IAsyncResult asyncResult);
      Task<List<Index>> GetAllIndexSettingsAsync();
      [OperationContract]
      void HeartBeat();
      IAsyncResult Begin_HeartBeat(AsyncCallback callback, object state);
      void End_HeartBeat(IAsyncResult asyncResult);
      Task HeartBeatAsync();
      [OperationContract]
      void DeadNodeNotification(string nodeName);
      IAsyncResult Begin_DeadNodeNotification(AsyncCallback callback, object state, string nodeName);
      void End_DeadNodeNotification(IAsyncResult asyncResult);
      Task DeadNodeNotificationAsync(string nodeName);
      [OperationContract]
      void JoinNodeNotification(string nodeName);
      IAsyncResult Begin_JoinNodeNotification(AsyncCallback callback, object state, string nodeName);
      void End_JoinNodeNotification(IAsyncResult asyncResult);
      Task JoinNodeNotificationAsync(string nodeName);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void AddIndex(Index index);
      IAsyncResult Begin_AddIndex(AsyncCallback callback, object state, Index index);
      void End_AddIndex(IAsyncResult asyncResult);
      Task AddIndexAsync(Index index);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void UpdateIndex(Index index);
      IAsyncResult Begin_UpdateIndex(AsyncCallback callback, object state, Index index);
      void End_UpdateIndex(IAsyncResult asyncResult);
      Task UpdateIndexAsync(Index index);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void GetIndex(string indexName);
      IAsyncResult Begin_GetIndex(AsyncCallback callback, object state, string indexName);
      void End_GetIndex(IAsyncResult asyncResult);
      Task GetIndexAsync(string indexName);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void DeleteIndex(string indexName);
      IAsyncResult Begin_DeleteIndex(AsyncCallback callback, object state, string indexName);
      void End_DeleteIndex(IAsyncResult asyncResult);
      Task DeleteIndexAsync(string indexName);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void SetIndexState(string indexName, bool online);
      IAsyncResult Begin_SetIndexState(AsyncCallback callback, object state, string indexName, bool online);
      void End_SetIndexState(IAsyncResult asyncResult);
      Task SetIndexStateAsync(string indexName, bool online);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void UpdateIndexConfiguration(string indexName, IndexConfiguration configuration);
      IAsyncResult Begin_UpdateIndexConfiguration(AsyncCallback callback, object state, string indexName, IndexConfiguration configuration);
      void End_UpdateIndexConfiguration(IAsyncResult asyncResult);
      Task UpdateIndexConfigurationAsync(string indexName, IndexConfiguration configuration);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      void UpdateShardConfiguration(string indexName, ShardConfiguration configuration);
      IAsyncResult Begin_UpdateShardConfiguration(AsyncCallback callback, object state, string indexName, ShardConfiguration configuration);
      void End_UpdateShardConfiguration(IAsyncResult asyncResult);
      Task UpdateShardConfigurationAsync(string indexName, ShardConfiguration configuration);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      string RequestFullIndexSync(string indexName, int shardNumber, string networkPath);
      IAsyncResult Begin_RequestFullIndexSync(AsyncCallback callback, object state, string indexName, int shardNumber, string networkPath);
      string End_RequestFullIndexSync(IAsyncResult asyncResult);
      Task<string> RequestFullIndexSyncAsync(string indexName, int shardNumber, string networkPath);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      List<Document> RequestTransactionLog(string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip);
      IAsyncResult Begin_RequestTransactionLog(AsyncCallback callback, object state, string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip);
      List<Document> End_RequestTransactionLog(IAsyncResult asyncResult);
      Task<List<Document>> RequestTransactionLogAsync(string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      int RequestTransactionLogCount(string indexName, int shardNumber, long startTimeStamp, long endTimestamp);
      IAsyncResult Begin_RequestTransactionLogCount(AsyncCallback callback, object state, string indexName, int shardNumber, long startTimeStamp, long endTimestamp);
      int End_RequestTransactionLogCount(IAsyncResult asyncResult);
      Task<int> RequestTransactionLogCountAsync(string indexName, int shardNumber, long startTimeStamp, long endTimestamp);
      [OperationContract]
      string PurgeTLog(string indexName, int shardNumber, long endTimeStamp);
      IAsyncResult Begin_PurgeTLog(AsyncCallback callback, object state, string indexName, int shardNumber, long endTimeStamp);
      string End_PurgeTLog(IAsyncResult asyncResult);
      Task<string> PurgeTLogAsync(string indexName, int shardNumber, long endTimeStamp);
      [OperationContract]
      [FaultContract(typeof(InvalidOperationFault))]
      Job GetJobById(string JobId);
      IAsyncResult Begin_GetJobById(AsyncCallback callback, object state, string JobId);
      Job End_GetJobById(IAsyncResult asyncResult);
      Task<Job> GetJobByIdAsync(string JobId);
      [OperationContract]
      void AddDocument(Document document);
      IAsyncResult Begin_AddDocument(AsyncCallback callback, object state, Document document);
      void End_AddDocument(IAsyncResult asyncResult);
      Task AddDocumentAsync(Document document);
      [OperationContract]
      void AddDocumentToReplica(Document document);
      IAsyncResult Begin_AddDocumentToReplica(AsyncCallback callback, object state, Document document);
      void End_AddDocumentToReplica(IAsyncResult asyncResult);
      Task AddDocumentToReplicaAsync(Document document);
      [OperationContract]
      void UpdateDocument(Document document);
      IAsyncResult Begin_UpdateDocument(AsyncCallback callback, object state, Document document);
      void End_UpdateDocument(IAsyncResult asyncResult);
      Task UpdateDocumentAsync(Document document);
      [OperationContract]
      void UpdateDocumentInReplica(Document document);
      IAsyncResult Begin_UpdateDocumentInReplica(AsyncCallback callback, object state, Document document);
      void End_UpdateDocumentInReplica(IAsyncResult asyncResult);
      Task UpdateDocumentInReplicaAsync(Document document);
      [OperationContract]
      void DeleteDocument(Document document);
      IAsyncResult Begin_DeleteDocument(AsyncCallback callback, object state, Document document);
      void End_DeleteDocument(IAsyncResult asyncResult);
      Task DeleteDocumentAsync(Document document);
      [OperationContract]
      void DeleteDocumentFromReplica(Document document);
      IAsyncResult Begin_DeleteDocumentFromReplica(AsyncCallback callback, object state, Document document);
      void End_DeleteDocumentFromReplica(IAsyncResult asyncResult);
      Task DeleteDocumentFromReplicaAsync(Document document);
      [OperationContract]
      Document GetDocument(string indexName, string documentId);
      IAsyncResult Begin_GetDocument(AsyncCallback callback, object state, string indexName, string documentId);
      Document End_GetDocument(IAsyncResult asyncResult);
      Task<Document> GetDocumentAsync(string indexName, string documentId);
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      public IAsyncResult Begin_RequestVoteForClusterMaster(AsyncCallback callback, object state, int term, string candidateId)
      {
        return send_RequestVoteForClusterMaster(callback, state, term, candidateId);
      }

      public VoteResponse End_RequestVoteForClusterMaster(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RequestVoteForClusterMaster();
      }

      public async Task<VoteResponse> RequestVoteForClusterMasterAsync(int term, string candidateId)
      {
        VoteResponse retval;
        retval = await Task.Run(() =>
        {
          return RequestVoteForClusterMaster(term, candidateId);
        });
        return retval;
      }

      public VoteResponse RequestVoteForClusterMaster(int term, string candidateId)
      {
        var asyncResult = Begin_RequestVoteForClusterMaster(null, null, term, candidateId);
        return End_RequestVoteForClusterMaster(asyncResult);

      }
      public IAsyncResult send_RequestVoteForClusterMaster(AsyncCallback callback, object state, int term, string candidateId)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestVoteForClusterMaster", TMessageType.Call, seqid_));
        RequestVoteForClusterMaster_args args = new RequestVoteForClusterMaster_args();
        args.Term = term;
        args.CandidateId = candidateId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public VoteResponse recv_RequestVoteForClusterMaster()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestVoteForClusterMaster_result result = new RequestVoteForClusterMaster_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RequestVoteForClusterMaster failed: unknown result");
      }

      
      public IAsyncResult Begin_GetAllIndexSettings(AsyncCallback callback, object state)
      {
        return send_GetAllIndexSettings(callback, state);
      }

      public List<Index> End_GetAllIndexSettings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllIndexSettings();
      }

      public async Task<List<Index>> GetAllIndexSettingsAsync()
      {
        List<Index> retval;
        retval = await Task.Run(() =>
        {
          return GetAllIndexSettings();
        });
        return retval;
      }

      public List<Index> GetAllIndexSettings()
      {
        var asyncResult = Begin_GetAllIndexSettings(null, null);
        return End_GetAllIndexSettings(asyncResult);

      }
      public IAsyncResult send_GetAllIndexSettings(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllIndexSettings", TMessageType.Call, seqid_));
        GetAllIndexSettings_args args = new GetAllIndexSettings_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public List<Index> recv_GetAllIndexSettings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllIndexSettings_result result = new GetAllIndexSettings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllIndexSettings failed: unknown result");
      }

      
      public IAsyncResult Begin_HeartBeat(AsyncCallback callback, object state)
      {
        return send_HeartBeat(callback, state);
      }

      public void End_HeartBeat(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task HeartBeatAsync()
      {
        await Task.Run(() =>
        {
          HeartBeat();
        });
      }

      public void HeartBeat()
      {
        var asyncResult = Begin_HeartBeat(null, null);

      }
      public IAsyncResult send_HeartBeat(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("HeartBeat", TMessageType.Call, seqid_));
        HeartBeat_args args = new HeartBeat_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_DeadNodeNotification(AsyncCallback callback, object state, string nodeName)
      {
        return send_DeadNodeNotification(callback, state, nodeName);
      }

      public void End_DeadNodeNotification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task DeadNodeNotificationAsync(string nodeName)
      {
        await Task.Run(() =>
        {
          DeadNodeNotification(nodeName);
        });
      }

      public void DeadNodeNotification(string nodeName)
      {
        var asyncResult = Begin_DeadNodeNotification(null, null, nodeName);

      }
      public IAsyncResult send_DeadNodeNotification(AsyncCallback callback, object state, string nodeName)
      {
        oprot_.WriteMessageBegin(new TMessage("DeadNodeNotification", TMessageType.Call, seqid_));
        DeadNodeNotification_args args = new DeadNodeNotification_args();
        args.NodeName = nodeName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_JoinNodeNotification(AsyncCallback callback, object state, string nodeName)
      {
        return send_JoinNodeNotification(callback, state, nodeName);
      }

      public void End_JoinNodeNotification(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task JoinNodeNotificationAsync(string nodeName)
      {
        await Task.Run(() =>
        {
          JoinNodeNotification(nodeName);
        });
      }

      public void JoinNodeNotification(string nodeName)
      {
        var asyncResult = Begin_JoinNodeNotification(null, null, nodeName);

      }
      public IAsyncResult send_JoinNodeNotification(AsyncCallback callback, object state, string nodeName)
      {
        oprot_.WriteMessageBegin(new TMessage("JoinNodeNotification", TMessageType.Call, seqid_));
        JoinNodeNotification_args args = new JoinNodeNotification_args();
        args.NodeName = nodeName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_AddIndex(AsyncCallback callback, object state, Index index)
      {
        return send_AddIndex(callback, state, index);
      }

      public void End_AddIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddIndex();
      }

      public async Task AddIndexAsync(Index index)
      {
        await Task.Run(() =>
        {
          AddIndex(index);
        });
      }

      public void AddIndex(Index index)
      {
        var asyncResult = Begin_AddIndex(null, null, index);
        End_AddIndex(asyncResult);

      }
      public IAsyncResult send_AddIndex(AsyncCallback callback, object state, Index index)
      {
        oprot_.WriteMessageBegin(new TMessage("AddIndex", TMessageType.Call, seqid_));
        AddIndex_args args = new AddIndex_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_AddIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddIndex_result result = new AddIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_UpdateIndex(AsyncCallback callback, object state, Index index)
      {
        return send_UpdateIndex(callback, state, index);
      }

      public void End_UpdateIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateIndex();
      }

      public async Task UpdateIndexAsync(Index index)
      {
        await Task.Run(() =>
        {
          UpdateIndex(index);
        });
      }

      public void UpdateIndex(Index index)
      {
        var asyncResult = Begin_UpdateIndex(null, null, index);
        End_UpdateIndex(asyncResult);

      }
      public IAsyncResult send_UpdateIndex(AsyncCallback callback, object state, Index index)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateIndex", TMessageType.Call, seqid_));
        UpdateIndex_args args = new UpdateIndex_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_UpdateIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateIndex_result result = new UpdateIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_GetIndex(AsyncCallback callback, object state, string indexName)
      {
        return send_GetIndex(callback, state, indexName);
      }

      public void End_GetIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_GetIndex();
      }

      public async Task GetIndexAsync(string indexName)
      {
        await Task.Run(() =>
        {
          GetIndex(indexName);
        });
      }

      public void GetIndex(string indexName)
      {
        var asyncResult = Begin_GetIndex(null, null, indexName);
        End_GetIndex(asyncResult);

      }
      public IAsyncResult send_GetIndex(AsyncCallback callback, object state, string indexName)
      {
        oprot_.WriteMessageBegin(new TMessage("GetIndex", TMessageType.Call, seqid_));
        GetIndex_args args = new GetIndex_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_GetIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetIndex_result result = new GetIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_DeleteIndex(AsyncCallback callback, object state, string indexName)
      {
        return send_DeleteIndex(callback, state, indexName);
      }

      public void End_DeleteIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DeleteIndex();
      }

      public async Task DeleteIndexAsync(string indexName)
      {
        await Task.Run(() =>
        {
          DeleteIndex(indexName);
        });
      }

      public void DeleteIndex(string indexName)
      {
        var asyncResult = Begin_DeleteIndex(null, null, indexName);
        End_DeleteIndex(asyncResult);

      }
      public IAsyncResult send_DeleteIndex(AsyncCallback callback, object state, string indexName)
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteIndex", TMessageType.Call, seqid_));
        DeleteIndex_args args = new DeleteIndex_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_DeleteIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteIndex_result result = new DeleteIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_SetIndexState(AsyncCallback callback, object state, string indexName, bool online)
      {
        return send_SetIndexState(callback, state, indexName, online);
      }

      public void End_SetIndexState(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_SetIndexState();
      }

      public async Task SetIndexStateAsync(string indexName, bool online)
      {
        await Task.Run(() =>
        {
          SetIndexState(indexName, online);
        });
      }

      public void SetIndexState(string indexName, bool online)
      {
        var asyncResult = Begin_SetIndexState(null, null, indexName, online);
        End_SetIndexState(asyncResult);

      }
      public IAsyncResult send_SetIndexState(AsyncCallback callback, object state, string indexName, bool online)
      {
        oprot_.WriteMessageBegin(new TMessage("SetIndexState", TMessageType.Call, seqid_));
        SetIndexState_args args = new SetIndexState_args();
        args.IndexName = indexName;
        args.Online = online;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_SetIndexState()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetIndexState_result result = new SetIndexState_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_UpdateIndexConfiguration(AsyncCallback callback, object state, string indexName, IndexConfiguration configuration)
      {
        return send_UpdateIndexConfiguration(callback, state, indexName, configuration);
      }

      public void End_UpdateIndexConfiguration(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateIndexConfiguration();
      }

      public async Task UpdateIndexConfigurationAsync(string indexName, IndexConfiguration configuration)
      {
        await Task.Run(() =>
        {
          UpdateIndexConfiguration(indexName, configuration);
        });
      }

      public void UpdateIndexConfiguration(string indexName, IndexConfiguration configuration)
      {
        var asyncResult = Begin_UpdateIndexConfiguration(null, null, indexName, configuration);
        End_UpdateIndexConfiguration(asyncResult);

      }
      public IAsyncResult send_UpdateIndexConfiguration(AsyncCallback callback, object state, string indexName, IndexConfiguration configuration)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateIndexConfiguration", TMessageType.Call, seqid_));
        UpdateIndexConfiguration_args args = new UpdateIndexConfiguration_args();
        args.IndexName = indexName;
        args.Configuration = configuration;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_UpdateIndexConfiguration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateIndexConfiguration_result result = new UpdateIndexConfiguration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_UpdateShardConfiguration(AsyncCallback callback, object state, string indexName, ShardConfiguration configuration)
      {
        return send_UpdateShardConfiguration(callback, state, indexName, configuration);
      }

      public void End_UpdateShardConfiguration(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateShardConfiguration();
      }

      public async Task UpdateShardConfigurationAsync(string indexName, ShardConfiguration configuration)
      {
        await Task.Run(() =>
        {
          UpdateShardConfiguration(indexName, configuration);
        });
      }

      public void UpdateShardConfiguration(string indexName, ShardConfiguration configuration)
      {
        var asyncResult = Begin_UpdateShardConfiguration(null, null, indexName, configuration);
        End_UpdateShardConfiguration(asyncResult);

      }
      public IAsyncResult send_UpdateShardConfiguration(AsyncCallback callback, object state, string indexName, ShardConfiguration configuration)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateShardConfiguration", TMessageType.Call, seqid_));
        UpdateShardConfiguration_args args = new UpdateShardConfiguration_args();
        args.IndexName = indexName;
        args.Configuration = configuration;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public void recv_UpdateShardConfiguration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateShardConfiguration_result result = new UpdateShardConfiguration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.message) {
          throw result.Message;
        }
        return;
      }

      
      public IAsyncResult Begin_RequestFullIndexSync(AsyncCallback callback, object state, string indexName, int shardNumber, string networkPath)
      {
        return send_RequestFullIndexSync(callback, state, indexName, shardNumber, networkPath);
      }

      public string End_RequestFullIndexSync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RequestFullIndexSync();
      }

      public async Task<string> RequestFullIndexSyncAsync(string indexName, int shardNumber, string networkPath)
      {
        string retval;
        retval = await Task.Run(() =>
        {
          return RequestFullIndexSync(indexName, shardNumber, networkPath);
        });
        return retval;
      }

      public string RequestFullIndexSync(string indexName, int shardNumber, string networkPath)
      {
        var asyncResult = Begin_RequestFullIndexSync(null, null, indexName, shardNumber, networkPath);
        return End_RequestFullIndexSync(asyncResult);

      }
      public IAsyncResult send_RequestFullIndexSync(AsyncCallback callback, object state, string indexName, int shardNumber, string networkPath)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestFullIndexSync", TMessageType.Call, seqid_));
        RequestFullIndexSync_args args = new RequestFullIndexSync_args();
        args.IndexName = indexName;
        args.ShardNumber = shardNumber;
        args.NetworkPath = networkPath;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public string recv_RequestFullIndexSync()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestFullIndexSync_result result = new RequestFullIndexSync_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.message) {
          throw result.Message;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RequestFullIndexSync failed: unknown result");
      }

      
      public IAsyncResult Begin_RequestTransactionLog(AsyncCallback callback, object state, string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip)
      {
        return send_RequestTransactionLog(callback, state, indexName, shardNumber, startTimeStamp, endTimestamp, count, skip);
      }

      public List<Document> End_RequestTransactionLog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RequestTransactionLog();
      }

      public async Task<List<Document>> RequestTransactionLogAsync(string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip)
      {
        List<Document> retval;
        retval = await Task.Run(() =>
        {
          return RequestTransactionLog(indexName, shardNumber, startTimeStamp, endTimestamp, count, skip);
        });
        return retval;
      }

      public List<Document> RequestTransactionLog(string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip)
      {
        var asyncResult = Begin_RequestTransactionLog(null, null, indexName, shardNumber, startTimeStamp, endTimestamp, count, skip);
        return End_RequestTransactionLog(asyncResult);

      }
      public IAsyncResult send_RequestTransactionLog(AsyncCallback callback, object state, string indexName, int shardNumber, long startTimeStamp, long endTimestamp, int count, int skip)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestTransactionLog", TMessageType.Call, seqid_));
        RequestTransactionLog_args args = new RequestTransactionLog_args();
        args.IndexName = indexName;
        args.ShardNumber = shardNumber;
        args.StartTimeStamp = startTimeStamp;
        args.EndTimestamp = endTimestamp;
        args.Count = count;
        args.Skip = skip;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public List<Document> recv_RequestTransactionLog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestTransactionLog_result result = new RequestTransactionLog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.message) {
          throw result.Message;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RequestTransactionLog failed: unknown result");
      }

      
      public IAsyncResult Begin_RequestTransactionLogCount(AsyncCallback callback, object state, string indexName, int shardNumber, long startTimeStamp, long endTimestamp)
      {
        return send_RequestTransactionLogCount(callback, state, indexName, shardNumber, startTimeStamp, endTimestamp);
      }

      public int End_RequestTransactionLogCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RequestTransactionLogCount();
      }

      public async Task<int> RequestTransactionLogCountAsync(string indexName, int shardNumber, long startTimeStamp, long endTimestamp)
      {
        int retval;
        retval = await Task.Run(() =>
        {
          return RequestTransactionLogCount(indexName, shardNumber, startTimeStamp, endTimestamp);
        });
        return retval;
      }

      public int RequestTransactionLogCount(string indexName, int shardNumber, long startTimeStamp, long endTimestamp)
      {
        var asyncResult = Begin_RequestTransactionLogCount(null, null, indexName, shardNumber, startTimeStamp, endTimestamp);
        return End_RequestTransactionLogCount(asyncResult);

      }
      public IAsyncResult send_RequestTransactionLogCount(AsyncCallback callback, object state, string indexName, int shardNumber, long startTimeStamp, long endTimestamp)
      {
        oprot_.WriteMessageBegin(new TMessage("RequestTransactionLogCount", TMessageType.Call, seqid_));
        RequestTransactionLogCount_args args = new RequestTransactionLogCount_args();
        args.IndexName = indexName;
        args.ShardNumber = shardNumber;
        args.StartTimeStamp = startTimeStamp;
        args.EndTimestamp = endTimestamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public int recv_RequestTransactionLogCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RequestTransactionLogCount_result result = new RequestTransactionLogCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.message) {
          throw result.Message;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RequestTransactionLogCount failed: unknown result");
      }

      
      public IAsyncResult Begin_PurgeTLog(AsyncCallback callback, object state, string indexName, int shardNumber, long endTimeStamp)
      {
        return send_PurgeTLog(callback, state, indexName, shardNumber, endTimeStamp);
      }

      public string End_PurgeTLog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PurgeTLog();
      }

      public async Task<string> PurgeTLogAsync(string indexName, int shardNumber, long endTimeStamp)
      {
        string retval;
        retval = await Task.Run(() =>
        {
          return PurgeTLog(indexName, shardNumber, endTimeStamp);
        });
        return retval;
      }

      public string PurgeTLog(string indexName, int shardNumber, long endTimeStamp)
      {
        var asyncResult = Begin_PurgeTLog(null, null, indexName, shardNumber, endTimeStamp);
        return End_PurgeTLog(asyncResult);

      }
      public IAsyncResult send_PurgeTLog(AsyncCallback callback, object state, string indexName, int shardNumber, long endTimeStamp)
      {
        oprot_.WriteMessageBegin(new TMessage("PurgeTLog", TMessageType.Call, seqid_));
        PurgeTLog_args args = new PurgeTLog_args();
        args.IndexName = indexName;
        args.ShardNumber = shardNumber;
        args.EndTimeStamp = endTimeStamp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public string recv_PurgeTLog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PurgeTLog_result result = new PurgeTLog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PurgeTLog failed: unknown result");
      }

      
      public IAsyncResult Begin_GetJobById(AsyncCallback callback, object state, string JobId)
      {
        return send_GetJobById(callback, state, JobId);
      }

      public Job End_GetJobById(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetJobById();
      }

      public async Task<Job> GetJobByIdAsync(string JobId)
      {
        Job retval;
        retval = await Task.Run(() =>
        {
          return GetJobById(JobId);
        });
        return retval;
      }

      public Job GetJobById(string JobId)
      {
        var asyncResult = Begin_GetJobById(null, null, JobId);
        return End_GetJobById(asyncResult);

      }
      public IAsyncResult send_GetJobById(AsyncCallback callback, object state, string JobId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetJobById", TMessageType.Call, seqid_));
        GetJobById_args args = new GetJobById_args();
        args.JobId = JobId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public Job recv_GetJobById()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetJobById_result result = new GetJobById_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.message) {
          throw result.Message;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetJobById failed: unknown result");
      }

      
      public IAsyncResult Begin_AddDocument(AsyncCallback callback, object state, Document document)
      {
        return send_AddDocument(callback, state, document);
      }

      public void End_AddDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task AddDocumentAsync(Document document)
      {
        await Task.Run(() =>
        {
          AddDocument(document);
        });
      }

      public void AddDocument(Document document)
      {
        var asyncResult = Begin_AddDocument(null, null, document);

      }
      public IAsyncResult send_AddDocument(AsyncCallback callback, object state, Document document)
      {
        oprot_.WriteMessageBegin(new TMessage("AddDocument", TMessageType.Call, seqid_));
        AddDocument_args args = new AddDocument_args();
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_AddDocumentToReplica(AsyncCallback callback, object state, Document document)
      {
        return send_AddDocumentToReplica(callback, state, document);
      }

      public void End_AddDocumentToReplica(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task AddDocumentToReplicaAsync(Document document)
      {
        await Task.Run(() =>
        {
          AddDocumentToReplica(document);
        });
      }

      public void AddDocumentToReplica(Document document)
      {
        var asyncResult = Begin_AddDocumentToReplica(null, null, document);

      }
      public IAsyncResult send_AddDocumentToReplica(AsyncCallback callback, object state, Document document)
      {
        oprot_.WriteMessageBegin(new TMessage("AddDocumentToReplica", TMessageType.Call, seqid_));
        AddDocumentToReplica_args args = new AddDocumentToReplica_args();
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_UpdateDocument(AsyncCallback callback, object state, Document document)
      {
        return send_UpdateDocument(callback, state, document);
      }

      public void End_UpdateDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task UpdateDocumentAsync(Document document)
      {
        await Task.Run(() =>
        {
          UpdateDocument(document);
        });
      }

      public void UpdateDocument(Document document)
      {
        var asyncResult = Begin_UpdateDocument(null, null, document);

      }
      public IAsyncResult send_UpdateDocument(AsyncCallback callback, object state, Document document)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateDocument", TMessageType.Call, seqid_));
        UpdateDocument_args args = new UpdateDocument_args();
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_UpdateDocumentInReplica(AsyncCallback callback, object state, Document document)
      {
        return send_UpdateDocumentInReplica(callback, state, document);
      }

      public void End_UpdateDocumentInReplica(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task UpdateDocumentInReplicaAsync(Document document)
      {
        await Task.Run(() =>
        {
          UpdateDocumentInReplica(document);
        });
      }

      public void UpdateDocumentInReplica(Document document)
      {
        var asyncResult = Begin_UpdateDocumentInReplica(null, null, document);

      }
      public IAsyncResult send_UpdateDocumentInReplica(AsyncCallback callback, object state, Document document)
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateDocumentInReplica", TMessageType.Call, seqid_));
        UpdateDocumentInReplica_args args = new UpdateDocumentInReplica_args();
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_DeleteDocument(AsyncCallback callback, object state, Document document)
      {
        return send_DeleteDocument(callback, state, document);
      }

      public void End_DeleteDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task DeleteDocumentAsync(Document document)
      {
        await Task.Run(() =>
        {
          DeleteDocument(document);
        });
      }

      public void DeleteDocument(Document document)
      {
        var asyncResult = Begin_DeleteDocument(null, null, document);

      }
      public IAsyncResult send_DeleteDocument(AsyncCallback callback, object state, Document document)
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteDocument", TMessageType.Call, seqid_));
        DeleteDocument_args args = new DeleteDocument_args();
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_DeleteDocumentFromReplica(AsyncCallback callback, object state, Document document)
      {
        return send_DeleteDocumentFromReplica(callback, state, document);
      }

      public void End_DeleteDocumentFromReplica(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      public async Task DeleteDocumentFromReplicaAsync(Document document)
      {
        await Task.Run(() =>
        {
          DeleteDocumentFromReplica(document);
        });
      }

      public void DeleteDocumentFromReplica(Document document)
      {
        var asyncResult = Begin_DeleteDocumentFromReplica(null, null, document);

      }
      public IAsyncResult send_DeleteDocumentFromReplica(AsyncCallback callback, object state, Document document)
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteDocumentFromReplica", TMessageType.Call, seqid_));
        DeleteDocumentFromReplica_args args = new DeleteDocumentFromReplica_args();
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      
      public IAsyncResult Begin_GetDocument(AsyncCallback callback, object state, string indexName, string documentId)
      {
        return send_GetDocument(callback, state, indexName, documentId);
      }

      public Document End_GetDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDocument();
      }

      public async Task<Document> GetDocumentAsync(string indexName, string documentId)
      {
        Document retval;
        retval = await Task.Run(() =>
        {
          return GetDocument(indexName, documentId);
        });
        return retval;
      }

      public Document GetDocument(string indexName, string documentId)
      {
        var asyncResult = Begin_GetDocument(null, null, indexName, documentId);
        return End_GetDocument(asyncResult);

      }
      public IAsyncResult send_GetDocument(AsyncCallback callback, object state, string indexName, string documentId)
      {
        oprot_.WriteMessageBegin(new TMessage("GetDocument", TMessageType.Call, seqid_));
        GetDocument_args args = new GetDocument_args();
        args.IndexName = indexName;
        args.DocumentId = documentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      public Document recv_GetDocument()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDocument_result result = new GetDocument_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDocument failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["RequestVoteForClusterMaster"] = RequestVoteForClusterMaster_Process;
        processMap_["GetAllIndexSettings"] = GetAllIndexSettings_Process;
        processMap_["HeartBeat"] = HeartBeat_Process;
        processMap_["DeadNodeNotification"] = DeadNodeNotification_Process;
        processMap_["JoinNodeNotification"] = JoinNodeNotification_Process;
        processMap_["AddIndex"] = AddIndex_Process;
        processMap_["UpdateIndex"] = UpdateIndex_Process;
        processMap_["GetIndex"] = GetIndex_Process;
        processMap_["DeleteIndex"] = DeleteIndex_Process;
        processMap_["SetIndexState"] = SetIndexState_Process;
        processMap_["UpdateIndexConfiguration"] = UpdateIndexConfiguration_Process;
        processMap_["UpdateShardConfiguration"] = UpdateShardConfiguration_Process;
        processMap_["RequestFullIndexSync"] = RequestFullIndexSync_Process;
        processMap_["RequestTransactionLog"] = RequestTransactionLog_Process;
        processMap_["RequestTransactionLogCount"] = RequestTransactionLogCount_Process;
        processMap_["PurgeTLog"] = PurgeTLog_Process;
        processMap_["GetJobById"] = GetJobById_Process;
        processMap_["AddDocument"] = AddDocument_Process;
        processMap_["AddDocumentToReplica"] = AddDocumentToReplica_Process;
        processMap_["UpdateDocument"] = UpdateDocument_Process;
        processMap_["UpdateDocumentInReplica"] = UpdateDocumentInReplica_Process;
        processMap_["DeleteDocument"] = DeleteDocument_Process;
        processMap_["DeleteDocumentFromReplica"] = DeleteDocumentFromReplica_Process;
        processMap_["GetDocument"] = GetDocument_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void RequestVoteForClusterMaster_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestVoteForClusterMaster_args args = new RequestVoteForClusterMaster_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestVoteForClusterMaster_result result = new RequestVoteForClusterMaster_result();
        result.Success = iface_.RequestVoteForClusterMaster(args.Term, args.CandidateId);
        oprot.WriteMessageBegin(new TMessage("RequestVoteForClusterMaster", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllIndexSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllIndexSettings_args args = new GetAllIndexSettings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllIndexSettings_result result = new GetAllIndexSettings_result();
        result.Success = iface_.GetAllIndexSettings();
        oprot.WriteMessageBegin(new TMessage("GetAllIndexSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void HeartBeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        HeartBeat_args args = new HeartBeat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.HeartBeat();
        return;
      }
      public void DeadNodeNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeadNodeNotification_args args = new DeadNodeNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.DeadNodeNotification(args.NodeName);
        return;
      }
      public void JoinNodeNotification_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        JoinNodeNotification_args args = new JoinNodeNotification_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.JoinNodeNotification(args.NodeName);
        return;
      }
      public void AddIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddIndex_args args = new AddIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddIndex_result result = new AddIndex_result();
        try {
          iface_.AddIndex(args.Index);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("AddIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateIndex_args args = new UpdateIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateIndex_result result = new UpdateIndex_result();
        try {
          iface_.UpdateIndex(args.Index);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("UpdateIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetIndex_args args = new GetIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetIndex_result result = new GetIndex_result();
        try {
          iface_.GetIndex(args.IndexName);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("GetIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteIndex_args args = new DeleteIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteIndex_result result = new DeleteIndex_result();
        try {
          iface_.DeleteIndex(args.IndexName);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("DeleteIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SetIndexState_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetIndexState_args args = new SetIndexState_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetIndexState_result result = new SetIndexState_result();
        try {
          iface_.SetIndexState(args.IndexName, args.Online);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("SetIndexState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateIndexConfiguration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateIndexConfiguration_args args = new UpdateIndexConfiguration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateIndexConfiguration_result result = new UpdateIndexConfiguration_result();
        try {
          iface_.UpdateIndexConfiguration(args.IndexName, args.Configuration);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("UpdateIndexConfiguration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateShardConfiguration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateShardConfiguration_args args = new UpdateShardConfiguration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateShardConfiguration_result result = new UpdateShardConfiguration_result();
        try {
          iface_.UpdateShardConfiguration(args.IndexName, args.Configuration);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("UpdateShardConfiguration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestFullIndexSync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestFullIndexSync_args args = new RequestFullIndexSync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestFullIndexSync_result result = new RequestFullIndexSync_result();
        try {
          result.Success = iface_.RequestFullIndexSync(args.IndexName, args.ShardNumber, args.NetworkPath);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("RequestFullIndexSync", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestTransactionLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestTransactionLog_args args = new RequestTransactionLog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestTransactionLog_result result = new RequestTransactionLog_result();
        try {
          result.Success = iface_.RequestTransactionLog(args.IndexName, args.ShardNumber, args.StartTimeStamp, args.EndTimestamp, args.Count, args.Skip);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("RequestTransactionLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RequestTransactionLogCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RequestTransactionLogCount_args args = new RequestTransactionLogCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RequestTransactionLogCount_result result = new RequestTransactionLogCount_result();
        try {
          result.Success = iface_.RequestTransactionLogCount(args.IndexName, args.ShardNumber, args.StartTimeStamp, args.EndTimestamp);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("RequestTransactionLogCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PurgeTLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PurgeTLog_args args = new PurgeTLog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PurgeTLog_result result = new PurgeTLog_result();
        result.Success = iface_.PurgeTLog(args.IndexName, args.ShardNumber, args.EndTimeStamp);
        oprot.WriteMessageBegin(new TMessage("PurgeTLog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetJobById_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetJobById_args args = new GetJobById_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetJobById_result result = new GetJobById_result();
        try {
          result.Success = iface_.GetJobById(args.JobId);
        } catch (InvalidOperation message) {
          result.Message = message;
        }
        oprot.WriteMessageBegin(new TMessage("GetJobById", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDocument_args args = new AddDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.AddDocument(args.Document);
        return;
      }
      public void AddDocumentToReplica_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDocumentToReplica_args args = new AddDocumentToReplica_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.AddDocumentToReplica(args.Document);
        return;
      }
      public void UpdateDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateDocument_args args = new UpdateDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.UpdateDocument(args.Document);
        return;
      }
      public void UpdateDocumentInReplica_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateDocumentInReplica_args args = new UpdateDocumentInReplica_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.UpdateDocumentInReplica(args.Document);
        return;
      }
      public void DeleteDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteDocument_args args = new DeleteDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.DeleteDocument(args.Document);
        return;
      }
      public void DeleteDocumentFromReplica_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteDocumentFromReplica_args args = new DeleteDocumentFromReplica_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.DeleteDocumentFromReplica(args.Document);
        return;
      }
      public void GetDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDocument_args args = new GetDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDocument_result result = new GetDocument_result();
        result.Success = iface_.GetDocument(args.IndexName, args.DocumentId);
        oprot.WriteMessageBegin(new TMessage("GetDocument", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestVoteForClusterMaster_args : TBase
    {
      private int _term;
      private string _candidateId;

      [DataMember]
      public int Term
      {
        get
        {
          return _term;
        }
        set
        {
          __isset.term = true;
          this._term = value;
        }
      }

      [DataMember]
      public string CandidateId
      {
        get
        {
          return _candidateId;
        }
        set
        {
          __isset.candidateId = true;
          this._candidateId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool term;
        public bool candidateId;
      }

      public RequestVoteForClusterMaster_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Term = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CandidateId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestVoteForClusterMaster_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.term) {
          field.Name = "term";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Term);
          oprot.WriteFieldEnd();
        }
        if (CandidateId != null && __isset.candidateId) {
          field.Name = "candidateId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CandidateId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestVoteForClusterMaster_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.term == other.__isset.term) && ((!__isset.term) || (System.Object.Equals(Term, other.Term))))
          && ((__isset.candidateId == other.__isset.candidateId) && ((!__isset.candidateId) || (System.Object.Equals(CandidateId, other.CandidateId))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.term ? 0 : (Term.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.candidateId ? 0 : (CandidateId.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestVoteForClusterMaster_args(");
        sb.Append("Term: ");
        sb.Append(Term);
        sb.Append(",CandidateId: ");
        sb.Append(CandidateId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestVoteForClusterMaster_result : TBase
    {
      private VoteResponse _success;

      [DataMember]
      public VoteResponse Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
      }

      public RequestVoteForClusterMaster_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VoteResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestVoteForClusterMaster_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestVoteForClusterMaster_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestVoteForClusterMaster_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetAllIndexSettings_args : TBase
    {

      public GetAllIndexSettings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllIndexSettings_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetAllIndexSettings_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllIndexSettings_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetAllIndexSettings_result : TBase
    {
      private List<Index> _success;

      [DataMember]
      public List<Index> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
      }

      public GetAllIndexSettings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Index>();
                  TList _list63 = iprot.ReadListBegin();
                  for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                  {
                    Index _elem65 = new Index();
                    _elem65 = new Index();
                    _elem65.Read(iprot);
                    Success.Add(_elem65);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllIndexSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Index _iter66 in Success)
              {
                _iter66.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetAllIndexSettings_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllIndexSettings_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class HeartBeat_args : TBase
    {

      public HeartBeat_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("HeartBeat_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as HeartBeat_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("HeartBeat_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeadNodeNotification_args : TBase
    {
      private string _nodeName;

      [DataMember]
      public string NodeName
      {
        get
        {
          return _nodeName;
        }
        set
        {
          __isset.nodeName = true;
          this._nodeName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool nodeName;
      }

      public DeadNodeNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NodeName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeadNodeNotification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NodeName != null && __isset.nodeName) {
          field.Name = "nodeName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NodeName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeadNodeNotification_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.nodeName == other.__isset.nodeName) && ((!__isset.nodeName) || (System.Object.Equals(NodeName, other.NodeName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.nodeName ? 0 : (NodeName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeadNodeNotification_args(");
        sb.Append("NodeName: ");
        sb.Append(NodeName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class JoinNodeNotification_args : TBase
    {
      private string _nodeName;

      [DataMember]
      public string NodeName
      {
        get
        {
          return _nodeName;
        }
        set
        {
          __isset.nodeName = true;
          this._nodeName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool nodeName;
      }

      public JoinNodeNotification_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NodeName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("JoinNodeNotification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NodeName != null && __isset.nodeName) {
          field.Name = "nodeName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NodeName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as JoinNodeNotification_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.nodeName == other.__isset.nodeName) && ((!__isset.nodeName) || (System.Object.Equals(NodeName, other.NodeName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.nodeName ? 0 : (NodeName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("JoinNodeNotification_args(");
        sb.Append("NodeName: ");
        sb.Append(NodeName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddIndex_args : TBase
    {
      private Index _index;

      [DataMember]
      public Index Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool index;
      }

      public AddIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Index = new Index();
                Index.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Index != null && __isset.index) {
          field.Name = "index";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Index.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.index == other.__isset.index) && ((!__isset.index) || (System.Object.Equals(Index, other.Index))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.index ? 0 : (Index.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddIndex_args(");
        sb.Append("Index: ");
        sb.Append(Index== null ? "<null>" : Index.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddIndex_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public AddIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddIndex_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateIndex_args : TBase
    {
      private Index _index;

      [DataMember]
      public Index Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool index;
      }

      public UpdateIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Index = new Index();
                Index.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Index != null && __isset.index) {
          field.Name = "index";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Index.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.index == other.__isset.index) && ((!__isset.index) || (System.Object.Equals(Index, other.Index))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.index ? 0 : (Index.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateIndex_args(");
        sb.Append("Index: ");
        sb.Append(Index== null ? "<null>" : Index.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateIndex_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public UpdateIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateIndex_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetIndex_args : TBase
    {
      private string _indexName;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public GetIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIndex_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetIndex_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public GetIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIndex_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteIndex_args : TBase
    {
      private string _indexName;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public DeleteIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteIndex_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteIndex_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public DeleteIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteIndex_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class SetIndexState_args : TBase
    {
      private string _indexName;
      private bool _online;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public bool Online
      {
        get
        {
          return _online;
        }
        set
        {
          __isset.online = true;
          this._online = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool online;
      }

      public SetIndexState_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Online = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetIndexState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (__isset.online) {
          field.Name = "online";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Online);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as SetIndexState_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.online == other.__isset.online) && ((!__isset.online) || (System.Object.Equals(Online, other.Online))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.online ? 0 : (Online.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetIndexState_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",Online: ");
        sb.Append(Online);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class SetIndexState_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public SetIndexState_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SetIndexState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as SetIndexState_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SetIndexState_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateIndexConfiguration_args : TBase
    {
      private string _indexName;
      private IndexConfiguration _configuration;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public IndexConfiguration Configuration
      {
        get
        {
          return _configuration;
        }
        set
        {
          __isset.configuration = true;
          this._configuration = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool configuration;
      }

      public UpdateIndexConfiguration_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Configuration = new IndexConfiguration();
                Configuration.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateIndexConfiguration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (Configuration != null && __isset.configuration) {
          field.Name = "configuration";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Configuration.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateIndexConfiguration_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (System.Object.Equals(Configuration, other.Configuration))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.configuration ? 0 : (Configuration.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateIndexConfiguration_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",Configuration: ");
        sb.Append(Configuration== null ? "<null>" : Configuration.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateIndexConfiguration_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public UpdateIndexConfiguration_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateIndexConfiguration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateIndexConfiguration_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateIndexConfiguration_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateShardConfiguration_args : TBase
    {
      private string _indexName;
      private ShardConfiguration _configuration;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public ShardConfiguration Configuration
      {
        get
        {
          return _configuration;
        }
        set
        {
          __isset.configuration = true;
          this._configuration = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool configuration;
      }

      public UpdateShardConfiguration_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Configuration = new ShardConfiguration();
                Configuration.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateShardConfiguration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (Configuration != null && __isset.configuration) {
          field.Name = "configuration";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Configuration.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateShardConfiguration_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (System.Object.Equals(Configuration, other.Configuration))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.configuration ? 0 : (Configuration.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateShardConfiguration_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",Configuration: ");
        sb.Append(Configuration== null ? "<null>" : Configuration.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateShardConfiguration_result : TBase
    {
      private InvalidOperation _message;

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool message;
      }

      public UpdateShardConfiguration_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateShardConfiguration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateShardConfiguration_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateShardConfiguration_result(");
        sb.Append("Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestFullIndexSync_args : TBase
    {
      private string _indexName;
      private int _shardNumber;
      private string _networkPath;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public int ShardNumber
      {
        get
        {
          return _shardNumber;
        }
        set
        {
          __isset.shardNumber = true;
          this._shardNumber = value;
        }
      }

      [DataMember]
      public string NetworkPath
      {
        get
        {
          return _networkPath;
        }
        set
        {
          __isset.networkPath = true;
          this._networkPath = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool shardNumber;
        public bool networkPath;
      }

      public RequestFullIndexSync_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ShardNumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                NetworkPath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestFullIndexSync_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (__isset.shardNumber) {
          field.Name = "shardNumber";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ShardNumber);
          oprot.WriteFieldEnd();
        }
        if (NetworkPath != null && __isset.networkPath) {
          field.Name = "networkPath";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NetworkPath);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestFullIndexSync_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.shardNumber == other.__isset.shardNumber) && ((!__isset.shardNumber) || (System.Object.Equals(ShardNumber, other.ShardNumber))))
          && ((__isset.networkPath == other.__isset.networkPath) && ((!__isset.networkPath) || (System.Object.Equals(NetworkPath, other.NetworkPath))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.shardNumber ? 0 : (ShardNumber.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.networkPath ? 0 : (NetworkPath.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestFullIndexSync_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",ShardNumber: ");
        sb.Append(ShardNumber);
        sb.Append(",NetworkPath: ");
        sb.Append(NetworkPath);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestFullIndexSync_result : TBase
    {
      private string _success;
      private InvalidOperation _message;

      [DataMember]
      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool message;
      }

      public RequestFullIndexSync_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestFullIndexSync_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestFullIndexSync_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestFullIndexSync_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestTransactionLog_args : TBase
    {
      private string _indexName;
      private int _shardNumber;
      private long _startTimeStamp;
      private long _endTimestamp;
      private int _count;
      private int _skip;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public int ShardNumber
      {
        get
        {
          return _shardNumber;
        }
        set
        {
          __isset.shardNumber = true;
          this._shardNumber = value;
        }
      }

      [DataMember]
      public long StartTimeStamp
      {
        get
        {
          return _startTimeStamp;
        }
        set
        {
          __isset.startTimeStamp = true;
          this._startTimeStamp = value;
        }
      }

      [DataMember]
      public long EndTimestamp
      {
        get
        {
          return _endTimestamp;
        }
        set
        {
          __isset.endTimestamp = true;
          this._endTimestamp = value;
        }
      }

      [DataMember]
      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }

      [DataMember]
      public int Skip
      {
        get
        {
          return _skip;
        }
        set
        {
          __isset.skip = true;
          this._skip = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool shardNumber;
        public bool startTimeStamp;
        public bool endTimestamp;
        public bool count;
        public bool skip;
      }

      public RequestTransactionLog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ShardNumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTimeStamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTimestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Skip = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestTransactionLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (__isset.shardNumber) {
          field.Name = "shardNumber";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ShardNumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.startTimeStamp) {
          field.Name = "startTimeStamp";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTimeStamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTimestamp) {
          field.Name = "endTimestamp";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTimestamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        if (__isset.skip) {
          field.Name = "skip";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Skip);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestTransactionLog_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.shardNumber == other.__isset.shardNumber) && ((!__isset.shardNumber) || (System.Object.Equals(ShardNumber, other.ShardNumber))))
          && ((__isset.startTimeStamp == other.__isset.startTimeStamp) && ((!__isset.startTimeStamp) || (System.Object.Equals(StartTimeStamp, other.StartTimeStamp))))
          && ((__isset.endTimestamp == other.__isset.endTimestamp) && ((!__isset.endTimestamp) || (System.Object.Equals(EndTimestamp, other.EndTimestamp))))
          && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))))
          && ((__isset.skip == other.__isset.skip) && ((!__isset.skip) || (System.Object.Equals(Skip, other.Skip))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.shardNumber ? 0 : (ShardNumber.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.startTimeStamp ? 0 : (StartTimeStamp.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.endTimestamp ? 0 : (EndTimestamp.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.count ? 0 : (Count.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.skip ? 0 : (Skip.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestTransactionLog_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",ShardNumber: ");
        sb.Append(ShardNumber);
        sb.Append(",StartTimeStamp: ");
        sb.Append(StartTimeStamp);
        sb.Append(",EndTimestamp: ");
        sb.Append(EndTimestamp);
        sb.Append(",Count: ");
        sb.Append(Count);
        sb.Append(",Skip: ");
        sb.Append(Skip);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestTransactionLog_result : TBase
    {
      private List<Document> _success;
      private InvalidOperation _message;

      [DataMember]
      public List<Document> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool message;
      }

      public RequestTransactionLog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Document>();
                  TList _list67 = iprot.ReadListBegin();
                  for( int _i68 = 0; _i68 < _list67.Count; ++_i68)
                  {
                    Document _elem69 = new Document();
                    _elem69 = new Document();
                    _elem69.Read(iprot);
                    Success.Add(_elem69);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestTransactionLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Document _iter70 in Success)
              {
                _iter70.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestTransactionLog_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestTransactionLog_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestTransactionLogCount_args : TBase
    {
      private string _indexName;
      private int _shardNumber;
      private long _startTimeStamp;
      private long _endTimestamp;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public int ShardNumber
      {
        get
        {
          return _shardNumber;
        }
        set
        {
          __isset.shardNumber = true;
          this._shardNumber = value;
        }
      }

      [DataMember]
      public long StartTimeStamp
      {
        get
        {
          return _startTimeStamp;
        }
        set
        {
          __isset.startTimeStamp = true;
          this._startTimeStamp = value;
        }
      }

      [DataMember]
      public long EndTimestamp
      {
        get
        {
          return _endTimestamp;
        }
        set
        {
          __isset.endTimestamp = true;
          this._endTimestamp = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool shardNumber;
        public bool startTimeStamp;
        public bool endTimestamp;
      }

      public RequestTransactionLogCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ShardNumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartTimeStamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EndTimestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestTransactionLogCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (__isset.shardNumber) {
          field.Name = "shardNumber";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ShardNumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.startTimeStamp) {
          field.Name = "startTimeStamp";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartTimeStamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTimestamp) {
          field.Name = "endTimestamp";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTimestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestTransactionLogCount_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.shardNumber == other.__isset.shardNumber) && ((!__isset.shardNumber) || (System.Object.Equals(ShardNumber, other.ShardNumber))))
          && ((__isset.startTimeStamp == other.__isset.startTimeStamp) && ((!__isset.startTimeStamp) || (System.Object.Equals(StartTimeStamp, other.StartTimeStamp))))
          && ((__isset.endTimestamp == other.__isset.endTimestamp) && ((!__isset.endTimestamp) || (System.Object.Equals(EndTimestamp, other.EndTimestamp))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.shardNumber ? 0 : (ShardNumber.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.startTimeStamp ? 0 : (StartTimeStamp.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.endTimestamp ? 0 : (EndTimestamp.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestTransactionLogCount_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",ShardNumber: ");
        sb.Append(ShardNumber);
        sb.Append(",StartTimeStamp: ");
        sb.Append(StartTimeStamp);
        sb.Append(",EndTimestamp: ");
        sb.Append(EndTimestamp);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class RequestTransactionLogCount_result : TBase
    {
      private int _success;
      private InvalidOperation _message;

      [DataMember]
      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool message;
      }

      public RequestTransactionLogCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("RequestTransactionLogCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as RequestTransactionLogCount_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("RequestTransactionLogCount_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class PurgeTLog_args : TBase
    {
      private string _indexName;
      private int _shardNumber;
      private long _endTimeStamp;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public int ShardNumber
      {
        get
        {
          return _shardNumber;
        }
        set
        {
          __isset.shardNumber = true;
          this._shardNumber = value;
        }
      }

      [DataMember]
      public long EndTimeStamp
      {
        get
        {
          return _endTimeStamp;
        }
        set
        {
          __isset.endTimeStamp = true;
          this._endTimeStamp = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool shardNumber;
        public bool endTimeStamp;
      }

      public PurgeTLog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ShardNumber = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                EndTimeStamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PurgeTLog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (__isset.shardNumber) {
          field.Name = "shardNumber";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ShardNumber);
          oprot.WriteFieldEnd();
        }
        if (__isset.endTimeStamp) {
          field.Name = "endTimeStamp";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndTimeStamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as PurgeTLog_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.shardNumber == other.__isset.shardNumber) && ((!__isset.shardNumber) || (System.Object.Equals(ShardNumber, other.ShardNumber))))
          && ((__isset.endTimeStamp == other.__isset.endTimeStamp) && ((!__isset.endTimeStamp) || (System.Object.Equals(EndTimeStamp, other.EndTimeStamp))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.shardNumber ? 0 : (ShardNumber.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.endTimeStamp ? 0 : (EndTimeStamp.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PurgeTLog_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",ShardNumber: ");
        sb.Append(ShardNumber);
        sb.Append(",EndTimeStamp: ");
        sb.Append(EndTimeStamp);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class PurgeTLog_result : TBase
    {
      private string _success;

      [DataMember]
      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
      }

      public PurgeTLog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PurgeTLog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as PurgeTLog_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PurgeTLog_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetJobById_args : TBase
    {
      private string _JobId;

      [DataMember]
      public string JobId
      {
        get
        {
          return _JobId;
        }
        set
        {
          __isset.JobId = true;
          this._JobId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool JobId;
      }

      public GetJobById_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                JobId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetJobById_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (JobId != null && __isset.JobId) {
          field.Name = "JobId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JobId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetJobById_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.JobId == other.__isset.JobId) && ((!__isset.JobId) || (System.Object.Equals(JobId, other.JobId))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.JobId ? 0 : (JobId.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetJobById_args(");
        sb.Append("JobId: ");
        sb.Append(JobId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetJobById_result : TBase
    {
      private Job _success;
      private InvalidOperation _message;

      [DataMember]
      public Job Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember]
      public InvalidOperation Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool message;
      }

      public GetJobById_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Job();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Message = new InvalidOperation();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetJobById_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.message) {
          if (Message != null) {
            field.Name = "Message";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Message.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetJobById_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.message ? 0 : (Message.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetJobById_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Message: ");
        sb.Append(Message== null ? "<null>" : Message.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddDocument_args : TBase
    {
      private Document _document;

      [DataMember]
      public Document Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool document;
      }

      public AddDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Document = new Document();
                Document.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Document.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.document == other.__isset.document) && ((!__isset.document) || (System.Object.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (Document.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDocument_args(");
        sb.Append("Document: ");
        sb.Append(Document== null ? "<null>" : Document.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddDocumentToReplica_args : TBase
    {
      private Document _document;

      [DataMember]
      public Document Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool document;
      }

      public AddDocumentToReplica_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Document = new Document();
                Document.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDocumentToReplica_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Document.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddDocumentToReplica_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.document == other.__isset.document) && ((!__isset.document) || (System.Object.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (Document.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDocumentToReplica_args(");
        sb.Append("Document: ");
        sb.Append(Document== null ? "<null>" : Document.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateDocument_args : TBase
    {
      private Document _document;

      [DataMember]
      public Document Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool document;
      }

      public UpdateDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Document = new Document();
                Document.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Document.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.document == other.__isset.document) && ((!__isset.document) || (System.Object.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (Document.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateDocument_args(");
        sb.Append("Document: ");
        sb.Append(Document== null ? "<null>" : Document.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateDocumentInReplica_args : TBase
    {
      private Document _document;

      [DataMember]
      public Document Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool document;
      }

      public UpdateDocumentInReplica_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Document = new Document();
                Document.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateDocumentInReplica_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Document.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateDocumentInReplica_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.document == other.__isset.document) && ((!__isset.document) || (System.Object.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (Document.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateDocumentInReplica_args(");
        sb.Append("Document: ");
        sb.Append(Document== null ? "<null>" : Document.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteDocument_args : TBase
    {
      private Document _document;

      [DataMember]
      public Document Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool document;
      }

      public DeleteDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Document = new Document();
                Document.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Document.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.document == other.__isset.document) && ((!__isset.document) || (System.Object.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (Document.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteDocument_args(");
        sb.Append("Document: ");
        sb.Append(Document== null ? "<null>" : Document.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteDocumentFromReplica_args : TBase
    {
      private Document _document;

      [DataMember]
      public Document Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool document;
      }

      public DeleteDocumentFromReplica_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Document = new Document();
                Document.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteDocumentFromReplica_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Document.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteDocumentFromReplica_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.document == other.__isset.document) && ((!__isset.document) || (System.Object.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (Document.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteDocumentFromReplica_args(");
        sb.Append("Document: ");
        sb.Append(Document== null ? "<null>" : Document.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetDocument_args : TBase
    {
      private string _indexName;
      private string _documentId;

      [DataMember]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember]
      public string DocumentId
      {
        get
        {
          return _documentId;
        }
        set
        {
          __isset.documentId = true;
          this._documentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool documentId;
      }

      public GetDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DocumentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (DocumentId != null && __isset.documentId) {
          field.Name = "documentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DocumentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.documentId == other.__isset.documentId) && ((!__isset.documentId) || (System.Object.Equals(DocumentId, other.DocumentId))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.documentId ? 0 : (DocumentId.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDocument_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",DocumentId: ");
        sb.Append(DocumentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetDocument_result : TBase
    {
      private Document _success;

      [DataMember]
      public Document Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
      }

      public GetDocument_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Document();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDocument_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetDocument_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDocument_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
