/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class SearchQuery : TBase
  {
    private List<string> _Columns;
    private int _Count;
    private HighlightOption _Highlights;
    private string _OrderBy;
    private int _Skip;
    private List<MissingValue> _MissingValueCofiguration;
    private MissingValueOption _GlobalMissingValue;

    [DataMember]
    public List<string> Columns
    {
      get
      {
        return _Columns;
      }
      set
      {
        __isset.Columns = true;
        this._Columns = value;
      }
    }

    [DataMember]
    public int Count
    {
      get
      {
        return _Count;
      }
      set
      {
        __isset.Count = true;
        this._Count = value;
      }
    }

    [DataMember]
    public HighlightOption Highlights
    {
      get
      {
        return _Highlights;
      }
      set
      {
        __isset.Highlights = true;
        this._Highlights = value;
      }
    }

    [DataMember]
    public string IndexName { get; set; }

    [DataMember]
    public string OrderBy
    {
      get
      {
        return _OrderBy;
      }
      set
      {
        __isset.OrderBy = true;
        this._OrderBy = value;
      }
    }

    [DataMember]
    public int Skip
    {
      get
      {
        return _Skip;
      }
      set
      {
        __isset.Skip = true;
        this._Skip = value;
      }
    }

    [DataMember]
    public string QueryString { get; set; }

    [DataMember]
    public List<MissingValue> MissingValueCofiguration
    {
      get
      {
        return _MissingValueCofiguration;
      }
      set
      {
        __isset.MissingValueCofiguration = true;
        this._MissingValueCofiguration = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MissingValueOption"/>
    /// </summary>
    [DataMember]
    public MissingValueOption GlobalMissingValue
    {
      get
      {
        return _GlobalMissingValue;
      }
      set
      {
        __isset.GlobalMissingValue = true;
        this._GlobalMissingValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool Columns;
      public bool Count;
      public bool Highlights;
      public bool OrderBy;
      public bool Skip;
      public bool MissingValueCofiguration;
      public bool GlobalMissingValue;
    }

    public SearchQuery() {
      this._Columns = new List<string>();
      this.__isset.Columns = true;
      this._Count = 10;
      this.__isset.Count = true;
      this._Highlights = new HighlightOption();
      this.__isset.Highlights = true;
      this._OrderBy = "score";
      this.__isset.OrderBy = true;
      this._Skip = 0;
      this.__isset.Skip = true;
      this._MissingValueCofiguration = new List<MissingValue>();
      this.__isset.MissingValueCofiguration = true;
      this._GlobalMissingValue = MissingValueOption.ThrowError;
      this.__isset.GlobalMissingValue = true;
    }

    public SearchQuery(string IndexName, string QueryString) : this() {
      this.IndexName = IndexName;
      this.QueryString = QueryString;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_IndexName = false;
      bool isset_QueryString = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Columns = new List<string>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  string _elem28 = null;
                  _elem28 = iprot.ReadString();
                  Columns.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Highlights = new HighlightOption();
              Highlights.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              IndexName = iprot.ReadString();
              isset_IndexName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              OrderBy = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Skip = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              QueryString = iprot.ReadString();
              isset_QueryString = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                MissingValueCofiguration = new List<MissingValue>();
                TList _list29 = iprot.ReadListBegin();
                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  MissingValue _elem31 = new MissingValue();
                  _elem31 = new MissingValue();
                  _elem31.Read(iprot);
                  MissingValueCofiguration.Add(_elem31);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              GlobalMissingValue = (MissingValueOption)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_IndexName)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_QueryString)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SearchQuery");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Columns != null && __isset.Columns) {
        field.Name = "Columns";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Columns.Count));
          foreach (string _iter32 in Columns)
          {
            oprot.WriteString(_iter32);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.Count) {
        field.Name = "Count";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Count);
        oprot.WriteFieldEnd();
      }
      if (Highlights != null && __isset.Highlights) {
        field.Name = "Highlights";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Highlights.Write(oprot);
        oprot.WriteFieldEnd();
      }
      field.Name = "IndexName";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(IndexName);
      oprot.WriteFieldEnd();
      if (OrderBy != null && __isset.OrderBy) {
        field.Name = "OrderBy";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderBy);
        oprot.WriteFieldEnd();
      }
      if (__isset.Skip) {
        field.Name = "Skip";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Skip);
        oprot.WriteFieldEnd();
      }
      field.Name = "QueryString";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(QueryString);
      oprot.WriteFieldEnd();
      if (MissingValueCofiguration != null && __isset.MissingValueCofiguration) {
        field.Name = "MissingValueCofiguration";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MissingValueCofiguration.Count));
          foreach (MissingValue _iter33 in MissingValueCofiguration)
          {
            _iter33.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.GlobalMissingValue) {
        field.Name = "GlobalMissingValue";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)GlobalMissingValue);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as SearchQuery;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Columns == other.__isset.Columns) && ((!__isset.Columns) || (TCollections.Equals(Columns, other.Columns))))
        && ((__isset.Count == other.__isset.Count) && ((!__isset.Count) || (System.Object.Equals(Count, other.Count))))
        && ((__isset.Highlights == other.__isset.Highlights) && ((!__isset.Highlights) || (System.Object.Equals(Highlights, other.Highlights))))
        && System.Object.Equals(IndexName, other.IndexName)
        && ((__isset.OrderBy == other.__isset.OrderBy) && ((!__isset.OrderBy) || (System.Object.Equals(OrderBy, other.OrderBy))))
        && ((__isset.Skip == other.__isset.Skip) && ((!__isset.Skip) || (System.Object.Equals(Skip, other.Skip))))
        && System.Object.Equals(QueryString, other.QueryString)
        && ((__isset.MissingValueCofiguration == other.__isset.MissingValueCofiguration) && ((!__isset.MissingValueCofiguration) || (TCollections.Equals(MissingValueCofiguration, other.MissingValueCofiguration))))
        && ((__isset.GlobalMissingValue == other.__isset.GlobalMissingValue) && ((!__isset.GlobalMissingValue) || (System.Object.Equals(GlobalMissingValue, other.GlobalMissingValue))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.Columns ? 0 : (TCollections.GetHashCode(Columns)));
        hashcode = (hashcode * 397) ^ (!__isset.Count ? 0 : (Count.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Highlights ? 0 : (Highlights.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((IndexName.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.OrderBy ? 0 : (OrderBy.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Skip ? 0 : (Skip.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((QueryString.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.MissingValueCofiguration ? 0 : (TCollections.GetHashCode(MissingValueCofiguration)));
        hashcode = (hashcode * 397) ^ (!__isset.GlobalMissingValue ? 0 : (GlobalMissingValue.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SearchQuery(");
      sb.Append("Columns: ");
      sb.Append(Columns);
      sb.Append(",Count: ");
      sb.Append(Count);
      sb.Append(",Highlights: ");
      sb.Append(Highlights== null ? "<null>" : Highlights.ToString());
      sb.Append(",IndexName: ");
      sb.Append(IndexName);
      sb.Append(",OrderBy: ");
      sb.Append(OrderBy);
      sb.Append(",Skip: ");
      sb.Append(Skip);
      sb.Append(",QueryString: ");
      sb.Append(QueryString);
      sb.Append(",MissingValueCofiguration: ");
      sb.Append(MissingValueCofiguration);
      sb.Append(",GlobalMissingValue: ");
      sb.Append(GlobalMissingValue);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
