/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class ScriptProperties : TBase
  {

    [DataMember]
    public string Source { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="ScriptType"/>
    /// </summary>
    [DataMember]
    public ScriptType ScriptType { get; set; }

    public ScriptProperties() {
    }

    public ScriptProperties(string Source, ScriptType ScriptType) : this() {
      this.Source = Source;
      this.ScriptType = ScriptType;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Source = false;
      bool isset_ScriptType = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Source = iprot.ReadString();
              isset_Source = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ScriptType = (ScriptType)iprot.ReadI32();
              isset_ScriptType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Source)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_ScriptType)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ScriptProperties");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Source";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Source);
      oprot.WriteFieldEnd();
      field.Name = "ScriptType";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)ScriptType);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as ScriptProperties;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Source, other.Source)
        && System.Object.Equals(ScriptType, other.ScriptType);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((Source.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((ScriptType.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ScriptProperties(");
      sb.Append("Source: ");
      sb.Append(Source);
      sb.Append(",ScriptType: ");
      sb.Append(ScriptType);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
