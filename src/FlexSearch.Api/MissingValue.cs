/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
//using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class MissingValue : TBase
  {
    private string _DefaultValue;

    [DataMember]
    public string FieldName { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="MissingValueOption"/>
    /// </summary>
    [DataMember]
    public MissingValueOption MissingValueOption { get; set; }

    [DataMember]
    public string DefaultValue
    {
      get
      {
        return _DefaultValue;
      }
      set
      {
        __isset.DefaultValue = true;
        this._DefaultValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool DefaultValue;
    }

    public MissingValue() {
    }

    public MissingValue(string FieldName, MissingValueOption MissingValueOption) : this() {
      this.FieldName = FieldName;
      this.MissingValueOption = MissingValueOption;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_FieldName = false;
      bool isset_MissingValueOption = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              FieldName = iprot.ReadString();
              isset_FieldName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              MissingValueOption = (MissingValueOption)iprot.ReadI32();
              isset_MissingValueOption = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DefaultValue = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_FieldName)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_MissingValueOption)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MissingValue");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "FieldName";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FieldName);
      oprot.WriteFieldEnd();
      field.Name = "MissingValueOption";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)MissingValueOption);
      oprot.WriteFieldEnd();
      if (DefaultValue != null && __isset.DefaultValue) {
        field.Name = "DefaultValue";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DefaultValue);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as MissingValue;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(FieldName, other.FieldName)
        && System.Object.Equals(MissingValueOption, other.MissingValueOption)
        && ((__isset.DefaultValue == other.__isset.DefaultValue) && ((!__isset.DefaultValue) || (System.Object.Equals(DefaultValue, other.DefaultValue))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((FieldName.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((MissingValueOption.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.DefaultValue ? 0 : (DefaultValue.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MissingValue(");
      sb.Append("FieldName: ");
      sb.Append(FieldName);
      sb.Append(",MissingValueOption: ");
      sb.Append(MissingValueOption);
      sb.Append(",DefaultValue: ");
      sb.Append(DefaultValue);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
