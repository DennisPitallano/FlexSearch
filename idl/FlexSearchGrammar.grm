! -----------------------------------------------------------------------------------
"Name"     = 'Flex Search Parser Grammar'
"Author"   = 'Seemant'
"Version"  = '1.0'
"About"    = 'Flex Search Parser'
! -----------------------------------------------------------------------------------

"Start Symbol" = <PredicateOr>

! =============================================================================
! Terminals
! =============================================================================

{String Ch}  = {All Valid} - ['''']
Value   = ''({String Ch}|'''')*''
Identifier = {Letter}{Alphanumeric}*            
Integer = {Digit}+
                            
! ============================================================================= 
! Predicates
! =============================================================================
!<Predicate> ::= <PredicateOr>

<PredicateOr>  ::= <PredicateAnd> OR <PredicateAnd>
               |  <PredicateAnd>

<PredicateAnd>     ::= <PredicateNot> AND <PredicateNot>
                      |  <PredicateNot>

<PredicateNot> ::= NOT <PredicateCompare>
                 | <PredicateCompare>

! =============================================================================
! The below is an left recursive grammar and I want to avoid it to 
! enable easy migration to something like ANTLR                 
!<PredicateOr>  ::= <PredicateAnd> OR <PredicateOr>
!               |  <PredicateAnd>
!
!<PredicateAnd>     ::= <PredicateNot> AND <PredicateAnd>
!                      |  <PredicateNot>
!
!<PredicateNot> ::= NOT <PredicateCompare>
!                 | <PredicateCompare>
! =============================================================================
                 
<PredicateCompare>    ::= Identifier Identifier <ValueIdentifier> <BoostIdentifier>
                |  '(' <PredicateOr> ')'

<ValueIdentifier> ::= Value
                    |  '[' <List> ']'

<List> ::= <List> ',' Value
        |  Value
                                                                                     
<BoostIdentifier>     ::= BOOST Integer
                        |  
