/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api.Connector
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class SqlSetting : TBase
  {
    private Dictionary<string, SqlQuery> _Queries;

    [DataMember(Order = 1)]
    public string ConnectionString { get; set; }

    [DataMember(Order = 2)]
    public Dictionary<string, SqlQuery> Queries
    {
      get
      {
        return _Queries;
      }
      set
      {
        __isset.Queries = true;
        this._Queries = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool Queries;
    }

    public SqlSetting() {
      this._Queries = new Dictionary<string, SqlQuery>();
      this.__isset.Queries = true;
    }

    public SqlSetting(string ConnectionString) : this() {
      this.ConnectionString = ConnectionString;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_ConnectionString = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ConnectionString = iprot.ReadString();
              isset_ConnectionString = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Queries = new Dictionary<string, SqlQuery>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  SqlQuery _val3;
                  _key2 = iprot.ReadString();
                  _val3 = new SqlQuery();
                  _val3.Read(iprot);
                  Queries[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_ConnectionString)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SqlSetting");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "ConnectionString";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(ConnectionString);
      oprot.WriteFieldEnd();
      if (Queries != null && __isset.Queries) {
        field.Name = "Queries";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Queries.Count));
          foreach (string _iter4 in Queries.Keys)
          {
            oprot.WriteString(_iter4);
            Queries[_iter4].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as SqlSetting;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(ConnectionString, other.ConnectionString)
        && ((__isset.Queries == other.__isset.Queries) && ((!__isset.Queries) || (TCollections.Equals(Queries, other.Queries))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((ConnectionString.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Queries ? 0 : (TCollections.GetHashCode(Queries)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SqlSetting(");
      sb.Append("ConnectionString: ");
      sb.Append(ConnectionString);
      sb.Append(",Queries: ");
      sb.Append(Queries);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
