/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class MapList : TBase
  {

    [DataMember(Order = 1)]
    public Dictionary<string, List<string>> Words { get; set; }

    public MapList() {
      this.Words = new Dictionary<string, List<string>>();
    }

    public MapList(Dictionary<string, List<string>> Words) : this() {
      this.Words = Words;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Words = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Words = new Dictionary<string, List<string>>();
                TMap _map64 = iprot.ReadMapBegin();
                for( int _i65 = 0; _i65 < _map64.Count; ++_i65)
                {
                  string _key66;
                  List<string> _val67;
                  _key66 = iprot.ReadString();
                  {
                    _val67 = new List<string>();
                    TList _list68 = iprot.ReadListBegin();
                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                    {
                      string _elem70 = null;
                      _elem70 = iprot.ReadString();
                      _val67.Add(_elem70);
                    }
                    iprot.ReadListEnd();
                  }
                  Words[_key66] = _val67;
                }
                iprot.ReadMapEnd();
              }
              isset_Words = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Words)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MapList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Words";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.List, Words.Count));
        foreach (string _iter71 in Words.Keys)
        {
          oprot.WriteString(_iter71);
          {
            oprot.WriteListBegin(new TList(TType.String, Words[_iter71].Count));
            foreach (string _iter72 in Words[_iter71])
            {
              oprot.WriteString(_iter72);
            }
            oprot.WriteListEnd();
          }
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as MapList;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Words, other.Words);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((TCollections.GetHashCode(Words)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MapList(");
      sb.Append("Words: ");
      sb.Append(Words);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
