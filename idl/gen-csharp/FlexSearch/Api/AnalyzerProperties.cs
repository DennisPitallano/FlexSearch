/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class AnalyzerProperties : TBase
  {

    [DataMember(Order = 1)]
    public Tokenizer Tokenizer { get; set; }

    [DataMember(Order = 2)]
    public List<TokenFilter> Filters { get; set; }

    public AnalyzerProperties() {
    }

    public AnalyzerProperties(Tokenizer Tokenizer, List<TokenFilter> Filters) : this() {
      this.Tokenizer = Tokenizer;
      this.Filters = Filters;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_Tokenizer = false;
      bool isset_Filters = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Tokenizer = new Tokenizer();
              Tokenizer.Read(iprot);
              isset_Tokenizer = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Filters = new List<TokenFilter>();
                TList _list10 = iprot.ReadListBegin();
                for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                {
                  TokenFilter _elem12 = new TokenFilter();
                  _elem12 = new TokenFilter();
                  _elem12.Read(iprot);
                  Filters.Add(_elem12);
                }
                iprot.ReadListEnd();
              }
              isset_Filters = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Tokenizer)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Filters)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AnalyzerProperties");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Tokenizer";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      Tokenizer.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "Filters";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Filters.Count));
        foreach (TokenFilter _iter13 in Filters)
        {
          _iter13.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as AnalyzerProperties;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Tokenizer, other.Tokenizer)
        && TCollections.Equals(Filters, other.Filters);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ ((Tokenizer.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((TCollections.GetHashCode(Filters)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AnalyzerProperties(");
      sb.Append("Tokenizer: ");
      sb.Append(Tokenizer== null ? "<null>" : Tokenizer.ToString());
      sb.Append(",Filters: ");
      sb.Append(Filters);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
