/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class VoteResponse : TBase
  {
    private string _VotedFor;
    private bool _VoteGranted;

    [DataMember(Order = 1)]
    public string VotedFor
    {
      get
      {
        return _VotedFor;
      }
      set
      {
        __isset.VotedFor = true;
        this._VotedFor = value;
      }
    }

    [DataMember(Order = 2)]
    public bool VoteGranted
    {
      get
      {
        return _VoteGranted;
      }
      set
      {
        __isset.VoteGranted = true;
        this._VoteGranted = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool VotedFor;
      public bool VoteGranted;
    }

    public VoteResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              VotedFor = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              VoteGranted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("VoteResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (VotedFor != null && __isset.VotedFor) {
        field.Name = "VotedFor";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VotedFor);
        oprot.WriteFieldEnd();
      }
      if (__isset.VoteGranted) {
        field.Name = "VoteGranted";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(VoteGranted);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as VoteResponse;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.VotedFor == other.__isset.VotedFor) && ((!__isset.VotedFor) || (System.Object.Equals(VotedFor, other.VotedFor))))
        && ((__isset.VoteGranted == other.__isset.VoteGranted) && ((!__isset.VoteGranted) || (System.Object.Equals(VoteGranted, other.VoteGranted))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.VotedFor ? 0 : (VotedFor.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.VoteGranted ? 0 : (VoteGranted.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("VoteResponse(");
      sb.Append("VotedFor: ");
      sb.Append(VotedFor);
      sb.Append(",VoteGranted: ");
      sb.Append(VoteGranted);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
