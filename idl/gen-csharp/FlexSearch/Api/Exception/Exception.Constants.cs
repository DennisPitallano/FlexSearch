/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

namespace FlexSearch.Api.Exception
{
  public static class ExceptionConstants
  {
    public static InvalidOperation INDEX_NOT_FOUND = new InvalidOperation();
    public static InvalidOperation INDEX_ALREADY_EXISTS = new InvalidOperation();
    public static InvalidOperation INDEX_SHOULD_BE_OFFLINE = new InvalidOperation();
    public static InvalidOperation INDEX_IS_OFFLINE = new InvalidOperation();
    public static InvalidOperation INDEX_IS_OPENING = new InvalidOperation();
    public static InvalidOperation INDEX_REGISTERATION_MISSING = new InvalidOperation();
    public static InvalidOperation INDEXING_DOCUMENT_ID_MISSING = new InvalidOperation();
    public static InvalidOperation ERROR_OPENING_INDEXWRITER = new InvalidOperation();
    public static InvalidOperation PROPERTY_CANNOT_BE_EMPTY = new InvalidOperation();
    public static InvalidOperation REGEX_NOT_MATCHED = new InvalidOperation();
    public static InvalidOperation VALUE_NOT_IN = new InvalidOperation();
    public static InvalidOperation VALUE_ONLY_IN = new InvalidOperation();
    public static InvalidOperation GREATER_THAN_EQUAL_TO = new InvalidOperation();
    public static InvalidOperation GREATER_THAN = new InvalidOperation();
    public static InvalidOperation LESS_THAN_EQUAL_TO = new InvalidOperation();
    public static InvalidOperation LESS_THAN = new InvalidOperation();
    public static InvalidOperation FILTER_CANNOT_BE_INITIALIZED = new InvalidOperation();
    public static InvalidOperation FILTER_NOT_FOUND = new InvalidOperation();
    public static InvalidOperation TOKENIZER_CANNOT_BE_INITIALIZED = new InvalidOperation();
    public static InvalidOperation TOKENIZER_NOT_FOUND = new InvalidOperation();
    public static InvalidOperation ATLEAST_ONE_FILTER_REQUIRED = new InvalidOperation();
    static ExceptionConstants()
    {
      INDEX_NOT_FOUND.DeveloperMessage = "The requested index does not exist.";
      INDEX_NOT_FOUND.UserMessage = "The requested index does not exist.";
      INDEX_NOT_FOUND.ErrorCode = 1000;
      INDEX_ALREADY_EXISTS.DeveloperMessage = "The requested index already exist.";
      INDEX_ALREADY_EXISTS.UserMessage = "The requested index already exist.";
      INDEX_ALREADY_EXISTS.ErrorCode = 1002;
      INDEX_SHOULD_BE_OFFLINE.DeveloperMessage = "Index should be made offline before attempting to update index settings.";
      INDEX_SHOULD_BE_OFFLINE.UserMessage = "Index should be made offline before attempting the operation.";
      INDEX_SHOULD_BE_OFFLINE.ErrorCode = 1003;
      INDEX_IS_OFFLINE.DeveloperMessage = "The index is offline or closing. Please bring the index online to use it.";
      INDEX_IS_OFFLINE.UserMessage = "The index is offline or closing. Please bring the index online to use it.";
      INDEX_IS_OFFLINE.ErrorCode = 1004;
      INDEX_IS_OPENING.DeveloperMessage = "The index is in opening state. Please wait some time before making another request.";
      INDEX_IS_OPENING.UserMessage = "The index is in opening state. Please wait some time before making another request.";
      INDEX_IS_OPENING.ErrorCode = 1005;
      INDEX_REGISTERATION_MISSING.DeveloperMessage = "Registeration information associated with the index is missing.";
      INDEX_REGISTERATION_MISSING.UserMessage = "Registeration information associated with the index is missing.";
      INDEX_REGISTERATION_MISSING.ErrorCode = 1006;
      INDEXING_DOCUMENT_ID_MISSING.DeveloperMessage = "Document id missing.";
      INDEXING_DOCUMENT_ID_MISSING.UserMessage = "Document Id is required in order to index an document. Please specify _documentid and submit the document for indexing.";
      INDEXING_DOCUMENT_ID_MISSING.ErrorCode = 1007;
      ERROR_OPENING_INDEXWRITER.DeveloperMessage = "{To be populated by the developer code}";
      ERROR_OPENING_INDEXWRITER.UserMessage = "Unable to open index writer.";
      ERROR_OPENING_INDEXWRITER.ErrorCode = 1008;
      PROPERTY_CANNOT_BE_EMPTY.DeveloperMessage = "Field:{propertyName} cannot be empty.";
      PROPERTY_CANNOT_BE_EMPTY.UserMessage = "Field:{propertyName} cannot be empty.";
      PROPERTY_CANNOT_BE_EMPTY.ErrorCode = 2001;
      REGEX_NOT_MATCHED.DeveloperMessage = "Field:{propertyName} does not match the regex pattern {value}.";
      REGEX_NOT_MATCHED.UserMessage = "Field:{propertyName} does not match the regex pattern {value}.";
      REGEX_NOT_MATCHED.ErrorCode = 2002;
      VALUE_NOT_IN.DeveloperMessage = "Field:{propertyName} cannot have the following as valid values: {value}.";
      VALUE_NOT_IN.UserMessage = "Field:{propertyName} cannot have the following as valid values: {value}.";
      VALUE_NOT_IN.ErrorCode = 2003;
      VALUE_ONLY_IN.DeveloperMessage = "Field:{propertyName} can only have the following as valid values: {value}.";
      VALUE_ONLY_IN.UserMessage = "Field:{propertyName} can only have the following as valid values: {value}.";
      VALUE_ONLY_IN.ErrorCode = 2004;
      GREATER_THAN_EQUAL_TO.DeveloperMessage = "Field:{propertyName} should be greater than or equal to: {value}.";
      GREATER_THAN_EQUAL_TO.UserMessage = "Field:{propertyName} should be greater than or equal to: {value}.";
      GREATER_THAN_EQUAL_TO.ErrorCode = 2005;
      GREATER_THAN.DeveloperMessage = "Field:{propertyName} should be greater than: {value}.";
      GREATER_THAN.UserMessage = "Field:{propertyName} should be greater than: {value}.";
      GREATER_THAN.ErrorCode = 2006;
      LESS_THAN_EQUAL_TO.DeveloperMessage = "Field:{propertyName} should be less than or equal to: {value}.";
      LESS_THAN_EQUAL_TO.UserMessage = "Field:{propertyName} should be less than or equal to: {value}.";
      LESS_THAN_EQUAL_TO.ErrorCode = 2005;
      LESS_THAN.DeveloperMessage = "Field:{propertyName} should be less than: {value}.";
      LESS_THAN.UserMessage = "Field:{propertyName} should be less than: {value}.";
      LESS_THAN.ErrorCode = 2006;
      FILTER_CANNOT_BE_INITIALIZED.DeveloperMessage = "Filter:{propertyName} cannot be initialized: {value}";
      FILTER_CANNOT_BE_INITIALIZED.UserMessage = "Filter:{propertyName} cannot be initialized.";
      FILTER_CANNOT_BE_INITIALIZED.ErrorCode = 2007;
      FILTER_NOT_FOUND.DeveloperMessage = "Filter:{propertyName} not found.";
      FILTER_NOT_FOUND.UserMessage = "Filter:{propertyName} not found.";
      FILTER_NOT_FOUND.ErrorCode = 2008;
      TOKENIZER_CANNOT_BE_INITIALIZED.DeveloperMessage = "Tokenizer:{propertyName} cannot be initialized: {value}";
      TOKENIZER_CANNOT_BE_INITIALIZED.UserMessage = "Tokenizer:{propertyName} cannot be initialized.";
      TOKENIZER_CANNOT_BE_INITIALIZED.ErrorCode = 2009;
      TOKENIZER_NOT_FOUND.DeveloperMessage = "Tokenizer:{propertyName} not found.";
      TOKENIZER_NOT_FOUND.UserMessage = "Tokenizer:{propertyName} not found.";
      TOKENIZER_NOT_FOUND.ErrorCode = 2010;
      ATLEAST_ONE_FILTER_REQUIRED.DeveloperMessage = "Atleast one filter should be specified for a custom analyzer.";
      ATLEAST_ONE_FILTER_REQUIRED.UserMessage = "Atleast one filter should be specified for a custom analyzer.";
      ATLEAST_ONE_FILTER_REQUIRED.ErrorCode = 2010;
    }
  }
}
