/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class Index : TBase
  {
    private Dictionary<string, AnalyzerProperties> _Analyzers;
    private Dictionary<string, ScriptProperties> _Scripts;
    private Dictionary<string, SearchQuery> _SearchProfiles;

    [DataMember(Order = 1)]
    public Dictionary<string, AnalyzerProperties> Analyzers
    {
      get
      {
        return _Analyzers;
      }
      set
      {
        __isset.Analyzers = true;
        this._Analyzers = value;
      }
    }

    [DataMember(Order = 2)]
    public IndexConfiguration IndexConfiguration { get; set; }

    [DataMember(Order = 3)]
    public Dictionary<string, FieldProperties> Fields { get; set; }

    [DataMember(Order = 4)]
    public string IndexName { get; set; }

    [DataMember(Order = 5)]
    public bool Online { get; set; }

    [DataMember(Order = 6)]
    public Dictionary<string, ScriptProperties> Scripts
    {
      get
      {
        return _Scripts;
      }
      set
      {
        __isset.Scripts = true;
        this._Scripts = value;
      }
    }

    [DataMember(Order = 7)]
    public Dictionary<string, SearchQuery> SearchProfiles
    {
      get
      {
        return _SearchProfiles;
      }
      set
      {
        __isset.SearchProfiles = true;
        this._SearchProfiles = value;
      }
    }

    [DataMember(Order = 8)]
    public ShardConfiguration ShardConfiguration { get; set; }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool Analyzers;
      public bool Scripts;
      public bool SearchProfiles;
    }

    public Index() {
      this._Analyzers = new Dictionary<string, AnalyzerProperties>();
      this.__isset.Analyzers = true;
      this.IndexConfiguration = new IndexConfiguration();
      this.Fields = new Dictionary<string, FieldProperties>();
      this.Online = false;
      this._Scripts = new Dictionary<string, ScriptProperties>();
      this.__isset.Scripts = true;
      this._SearchProfiles = new Dictionary<string, SearchQuery>();
      this.__isset.SearchProfiles = true;
      this.ShardConfiguration = new ShardConfiguration();
    }

    public Index(IndexConfiguration IndexConfiguration, Dictionary<string, FieldProperties> Fields, string IndexName, bool Online, ShardConfiguration ShardConfiguration) : this() {
      this.IndexConfiguration = IndexConfiguration;
      this.Fields = Fields;
      this.IndexName = IndexName;
      this.Online = Online;
      this.ShardConfiguration = ShardConfiguration;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_IndexConfiguration = false;
      bool isset_Fields = false;
      bool isset_IndexName = false;
      bool isset_Online = false;
      bool isset_ShardConfiguration = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Analyzers = new Dictionary<string, AnalyzerProperties>();
                TMap _map36 = iprot.ReadMapBegin();
                for( int _i37 = 0; _i37 < _map36.Count; ++_i37)
                {
                  string _key38;
                  AnalyzerProperties _val39;
                  _key38 = iprot.ReadString();
                  _val39 = new AnalyzerProperties();
                  _val39.Read(iprot);
                  Analyzers[_key38] = _val39;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              IndexConfiguration = new IndexConfiguration();
              IndexConfiguration.Read(iprot);
              isset_IndexConfiguration = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Fields = new Dictionary<string, FieldProperties>();
                TMap _map40 = iprot.ReadMapBegin();
                for( int _i41 = 0; _i41 < _map40.Count; ++_i41)
                {
                  string _key42;
                  FieldProperties _val43;
                  _key42 = iprot.ReadString();
                  _val43 = new FieldProperties();
                  _val43.Read(iprot);
                  Fields[_key42] = _val43;
                }
                iprot.ReadMapEnd();
              }
              isset_Fields = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              IndexName = iprot.ReadString();
              isset_IndexName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Online = iprot.ReadBool();
              isset_Online = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                Scripts = new Dictionary<string, ScriptProperties>();
                TMap _map44 = iprot.ReadMapBegin();
                for( int _i45 = 0; _i45 < _map44.Count; ++_i45)
                {
                  string _key46;
                  ScriptProperties _val47;
                  _key46 = iprot.ReadString();
                  _val47 = new ScriptProperties();
                  _val47.Read(iprot);
                  Scripts[_key46] = _val47;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                SearchProfiles = new Dictionary<string, SearchQuery>();
                TMap _map48 = iprot.ReadMapBegin();
                for( int _i49 = 0; _i49 < _map48.Count; ++_i49)
                {
                  string _key50;
                  SearchQuery _val51;
                  _key50 = iprot.ReadString();
                  _val51 = new SearchQuery();
                  _val51.Read(iprot);
                  SearchProfiles[_key50] = _val51;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              ShardConfiguration = new ShardConfiguration();
              ShardConfiguration.Read(iprot);
              isset_ShardConfiguration = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_IndexConfiguration)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Fields)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_IndexName)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Online)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_ShardConfiguration)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Index");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Analyzers != null && __isset.Analyzers) {
        field.Name = "Analyzers";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Analyzers.Count));
          foreach (string _iter52 in Analyzers.Keys)
          {
            oprot.WriteString(_iter52);
            Analyzers[_iter52].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      field.Name = "IndexConfiguration";
      field.Type = TType.Struct;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      IndexConfiguration.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "Fields";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Fields.Count));
        foreach (string _iter53 in Fields.Keys)
        {
          oprot.WriteString(_iter53);
          Fields[_iter53].Write(oprot);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      field.Name = "IndexName";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(IndexName);
      oprot.WriteFieldEnd();
      field.Name = "Online";
      field.Type = TType.Bool;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Online);
      oprot.WriteFieldEnd();
      if (Scripts != null && __isset.Scripts) {
        field.Name = "Scripts";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Scripts.Count));
          foreach (string _iter54 in Scripts.Keys)
          {
            oprot.WriteString(_iter54);
            Scripts[_iter54].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SearchProfiles != null && __isset.SearchProfiles) {
        field.Name = "SearchProfiles";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, SearchProfiles.Count));
          foreach (string _iter55 in SearchProfiles.Keys)
          {
            oprot.WriteString(_iter55);
            SearchProfiles[_iter55].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      field.Name = "ShardConfiguration";
      field.Type = TType.Struct;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      ShardConfiguration.Write(oprot);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as Index;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Analyzers == other.__isset.Analyzers) && ((!__isset.Analyzers) || (TCollections.Equals(Analyzers, other.Analyzers))))
        && System.Object.Equals(IndexConfiguration, other.IndexConfiguration)
        && TCollections.Equals(Fields, other.Fields)
        && System.Object.Equals(IndexName, other.IndexName)
        && System.Object.Equals(Online, other.Online)
        && ((__isset.Scripts == other.__isset.Scripts) && ((!__isset.Scripts) || (TCollections.Equals(Scripts, other.Scripts))))
        && ((__isset.SearchProfiles == other.__isset.SearchProfiles) && ((!__isset.SearchProfiles) || (TCollections.Equals(SearchProfiles, other.SearchProfiles))))
        && System.Object.Equals(ShardConfiguration, other.ShardConfiguration);
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.Analyzers ? 0 : (TCollections.GetHashCode(Analyzers)));
        hashcode = (hashcode * 397) ^ ((IndexConfiguration.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((TCollections.GetHashCode(Fields)));
        hashcode = (hashcode * 397) ^ ((IndexName.GetHashCode()));
        hashcode = (hashcode * 397) ^ ((Online.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Scripts ? 0 : (TCollections.GetHashCode(Scripts)));
        hashcode = (hashcode * 397) ^ (!__isset.SearchProfiles ? 0 : (TCollections.GetHashCode(SearchProfiles)));
        hashcode = (hashcode * 397) ^ ((ShardConfiguration.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Index(");
      sb.Append("Analyzers: ");
      sb.Append(Analyzers);
      sb.Append(",IndexConfiguration: ");
      sb.Append(IndexConfiguration== null ? "<null>" : IndexConfiguration.ToString());
      sb.Append(",Fields: ");
      sb.Append(Fields);
      sb.Append(",IndexName: ");
      sb.Append(IndexName);
      sb.Append(",Online: ");
      sb.Append(Online);
      sb.Append(",Scripts: ");
      sb.Append(Scripts);
      sb.Append(",SearchProfiles: ");
      sb.Append(SearchProfiles);
      sb.Append(",ShardConfiguration: ");
      sb.Append(ShardConfiguration== null ? "<null>" : ShardConfiguration.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
