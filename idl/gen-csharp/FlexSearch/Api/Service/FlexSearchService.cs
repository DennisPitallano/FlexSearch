/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api.Service
{
  public partial class FlexSearchService {
    [ServiceContract(Namespace="")]
    public interface Iface {
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      FlexSearch.Api.Index GetIndex(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_GetIndex(AsyncCallback callback, object state, string indexName);
      FlexSearch.Api.Index End_GetIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void UpdateIndex(FlexSearch.Api.Index index);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateIndex(AsyncCallback callback, object state, FlexSearch.Api.Index index);
      void End_UpdateIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void DeleteIndex(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteIndex(AsyncCallback callback, object state, string indexName);
      void End_DeleteIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void AddIndex(FlexSearch.Api.Index index);
      #if SILVERLIGHT
      IAsyncResult Begin_AddIndex(AsyncCallback callback, object state, FlexSearch.Api.Index index);
      void End_AddIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      List<FlexSearch.Api.Index> GetAllIndex();
      #if SILVERLIGHT
      IAsyncResult Begin_GetAllIndex(AsyncCallback callback, object state);
      List<FlexSearch.Api.Index> End_GetAllIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      bool IndexExists(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_IndexExists(AsyncCallback callback, object state, string indexName);
      bool End_IndexExists(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      FlexSearch.Api.IndexState GetIndexStatus(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_GetIndexStatus(AsyncCallback callback, object state, string indexName);
      FlexSearch.Api.IndexState End_GetIndexStatus(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void OpenIndex(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_OpenIndex(AsyncCallback callback, object state, string indexName);
      void End_OpenIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void CloseIndex(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_CloseIndex(AsyncCallback callback, object state, string indexName);
      void End_CloseIndex(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      FlexSearch.Api.Job GetJob(string jobId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetJob(AsyncCallback callback, object state, string jobId);
      FlexSearch.Api.Job End_GetJob(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      FlexSearch.Api.SearchResults Search(FlexSearch.Api.SearchQuery query);
      #if SILVERLIGHT
      IAsyncResult Begin_Search(AsyncCallback callback, object state, FlexSearch.Api.SearchQuery query);
      FlexSearch.Api.SearchResults End_Search(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      List<Dictionary<string, string>> SearchWithFlatResults(FlexSearch.Api.SearchQuery query);
      #if SILVERLIGHT
      IAsyncResult Begin_SearchWithFlatResults(AsyncCallback callback, object state, FlexSearch.Api.SearchQuery query);
      List<Dictionary<string, string>> End_SearchWithFlatResults(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      Dictionary<string, string> GetDocument(string indexName, string documentId);
      #if SILVERLIGHT
      IAsyncResult Begin_GetDocument(AsyncCallback callback, object state, string indexName, string documentId);
      Dictionary<string, string> End_GetDocument(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      List<Dictionary<string, string>> GetDocuments(string indexName);
      #if SILVERLIGHT
      IAsyncResult Begin_GetDocuments(AsyncCallback callback, object state, string indexName);
      List<Dictionary<string, string>> End_GetDocuments(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void AddOrUpdateDocument(string indexName, string documentId, Dictionary<string, string> document);
      #if SILVERLIGHT
      IAsyncResult Begin_AddOrUpdateDocument(AsyncCallback callback, object state, string indexName, string documentId, Dictionary<string, string> document);
      void End_AddOrUpdateDocument(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void AddDocument(string indexName, string documentId, Dictionary<string, string> document);
      #if SILVERLIGHT
      IAsyncResult Begin_AddDocument(AsyncCallback callback, object state, string indexName, string documentId, Dictionary<string, string> document);
      void End_AddDocument(IAsyncResult asyncResult);
      #endif
      [OperationContract]
      [FaultContract(typeof(FlexSearch.Api.Message.InvalidOperationFault))]
      void DeleteDocument(string indexName, string documentId);
      #if SILVERLIGHT
      IAsyncResult Begin_DeleteDocument(AsyncCallback callback, object state, string indexName, string documentId);
      void End_DeleteDocument(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetIndex(AsyncCallback callback, object state, string indexName)
      {
        return send_GetIndex(callback, state, indexName);
      }

      public FlexSearch.Api.Index End_GetIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetIndex();
      }

      #endif

      public FlexSearch.Api.Index GetIndex(string indexName)
      {
        #if !SILVERLIGHT
        send_GetIndex(indexName);
        return recv_GetIndex();

        #else
        var asyncResult = Begin_GetIndex(null, null, indexName);
        return End_GetIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetIndex(AsyncCallback callback, object state, string indexName)
      #else
      public void send_GetIndex(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetIndex", TMessageType.Call, seqid_));
        GetIndex_args args = new GetIndex_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FlexSearch.Api.Index recv_GetIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetIndex_result result = new GetIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetIndex failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateIndex(AsyncCallback callback, object state, FlexSearch.Api.Index index)
      {
        return send_UpdateIndex(callback, state, index);
      }

      public void End_UpdateIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateIndex();
      }

      #endif

      public void UpdateIndex(FlexSearch.Api.Index index)
      {
        #if !SILVERLIGHT
        send_UpdateIndex(index);
        recv_UpdateIndex();

        #else
        var asyncResult = Begin_UpdateIndex(null, null, index);
        End_UpdateIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateIndex(AsyncCallback callback, object state, FlexSearch.Api.Index index)
      #else
      public void send_UpdateIndex(FlexSearch.Api.Index index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateIndex", TMessageType.Call, seqid_));
        UpdateIndex_args args = new UpdateIndex_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UpdateIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateIndex_result result = new UpdateIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteIndex(AsyncCallback callback, object state, string indexName)
      {
        return send_DeleteIndex(callback, state, indexName);
      }

      public void End_DeleteIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DeleteIndex();
      }

      #endif

      public void DeleteIndex(string indexName)
      {
        #if !SILVERLIGHT
        send_DeleteIndex(indexName);
        recv_DeleteIndex();

        #else
        var asyncResult = Begin_DeleteIndex(null, null, indexName);
        End_DeleteIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteIndex(AsyncCallback callback, object state, string indexName)
      #else
      public void send_DeleteIndex(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteIndex", TMessageType.Call, seqid_));
        DeleteIndex_args args = new DeleteIndex_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_DeleteIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteIndex_result result = new DeleteIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddIndex(AsyncCallback callback, object state, FlexSearch.Api.Index index)
      {
        return send_AddIndex(callback, state, index);
      }

      public void End_AddIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddIndex();
      }

      #endif

      public void AddIndex(FlexSearch.Api.Index index)
      {
        #if !SILVERLIGHT
        send_AddIndex(index);
        recv_AddIndex();

        #else
        var asyncResult = Begin_AddIndex(null, null, index);
        End_AddIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddIndex(AsyncCallback callback, object state, FlexSearch.Api.Index index)
      #else
      public void send_AddIndex(FlexSearch.Api.Index index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddIndex", TMessageType.Call, seqid_));
        AddIndex_args args = new AddIndex_args();
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AddIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddIndex_result result = new AddIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetAllIndex(AsyncCallback callback, object state)
      {
        return send_GetAllIndex(callback, state);
      }

      public List<FlexSearch.Api.Index> End_GetAllIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetAllIndex();
      }

      #endif

      public List<FlexSearch.Api.Index> GetAllIndex()
      {
        #if !SILVERLIGHT
        send_GetAllIndex();
        return recv_GetAllIndex();

        #else
        var asyncResult = Begin_GetAllIndex(null, null);
        return End_GetAllIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetAllIndex(AsyncCallback callback, object state)
      #else
      public void send_GetAllIndex()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetAllIndex", TMessageType.Call, seqid_));
        GetAllIndex_args args = new GetAllIndex_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<FlexSearch.Api.Index> recv_GetAllIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetAllIndex_result result = new GetAllIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllIndex failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_IndexExists(AsyncCallback callback, object state, string indexName)
      {
        return send_IndexExists(callback, state, indexName);
      }

      public bool End_IndexExists(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_IndexExists();
      }

      #endif

      public bool IndexExists(string indexName)
      {
        #if !SILVERLIGHT
        send_IndexExists(indexName);
        return recv_IndexExists();

        #else
        var asyncResult = Begin_IndexExists(null, null, indexName);
        return End_IndexExists(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_IndexExists(AsyncCallback callback, object state, string indexName)
      #else
      public void send_IndexExists(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("IndexExists", TMessageType.Call, seqid_));
        IndexExists_args args = new IndexExists_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_IndexExists()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IndexExists_result result = new IndexExists_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IndexExists failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetIndexStatus(AsyncCallback callback, object state, string indexName)
      {
        return send_GetIndexStatus(callback, state, indexName);
      }

      public FlexSearch.Api.IndexState End_GetIndexStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetIndexStatus();
      }

      #endif

      public FlexSearch.Api.IndexState GetIndexStatus(string indexName)
      {
        #if !SILVERLIGHT
        send_GetIndexStatus(indexName);
        return recv_GetIndexStatus();

        #else
        var asyncResult = Begin_GetIndexStatus(null, null, indexName);
        return End_GetIndexStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetIndexStatus(AsyncCallback callback, object state, string indexName)
      #else
      public void send_GetIndexStatus(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetIndexStatus", TMessageType.Call, seqid_));
        GetIndexStatus_args args = new GetIndexStatus_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FlexSearch.Api.IndexState recv_GetIndexStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetIndexStatus_result result = new GetIndexStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetIndexStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_OpenIndex(AsyncCallback callback, object state, string indexName)
      {
        return send_OpenIndex(callback, state, indexName);
      }

      public void End_OpenIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_OpenIndex();
      }

      #endif

      public void OpenIndex(string indexName)
      {
        #if !SILVERLIGHT
        send_OpenIndex(indexName);
        recv_OpenIndex();

        #else
        var asyncResult = Begin_OpenIndex(null, null, indexName);
        End_OpenIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_OpenIndex(AsyncCallback callback, object state, string indexName)
      #else
      public void send_OpenIndex(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("OpenIndex", TMessageType.Call, seqid_));
        OpenIndex_args args = new OpenIndex_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_OpenIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        OpenIndex_result result = new OpenIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CloseIndex(AsyncCallback callback, object state, string indexName)
      {
        return send_CloseIndex(callback, state, indexName);
      }

      public void End_CloseIndex(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_CloseIndex();
      }

      #endif

      public void CloseIndex(string indexName)
      {
        #if !SILVERLIGHT
        send_CloseIndex(indexName);
        recv_CloseIndex();

        #else
        var asyncResult = Begin_CloseIndex(null, null, indexName);
        End_CloseIndex(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CloseIndex(AsyncCallback callback, object state, string indexName)
      #else
      public void send_CloseIndex(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CloseIndex", TMessageType.Call, seqid_));
        CloseIndex_args args = new CloseIndex_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_CloseIndex()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CloseIndex_result result = new CloseIndex_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetJob(AsyncCallback callback, object state, string jobId)
      {
        return send_GetJob(callback, state, jobId);
      }

      public FlexSearch.Api.Job End_GetJob(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetJob();
      }

      #endif

      public FlexSearch.Api.Job GetJob(string jobId)
      {
        #if !SILVERLIGHT
        send_GetJob(jobId);
        return recv_GetJob();

        #else
        var asyncResult = Begin_GetJob(null, null, jobId);
        return End_GetJob(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetJob(AsyncCallback callback, object state, string jobId)
      #else
      public void send_GetJob(string jobId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetJob", TMessageType.Call, seqid_));
        GetJob_args args = new GetJob_args();
        args.JobId = jobId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FlexSearch.Api.Job recv_GetJob()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetJob_result result = new GetJob_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetJob failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Search(AsyncCallback callback, object state, FlexSearch.Api.SearchQuery query)
      {
        return send_Search(callback, state, query);
      }

      public FlexSearch.Api.SearchResults End_Search(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Search();
      }

      #endif

      public FlexSearch.Api.SearchResults Search(FlexSearch.Api.SearchQuery query)
      {
        #if !SILVERLIGHT
        send_Search(query);
        return recv_Search();

        #else
        var asyncResult = Begin_Search(null, null, query);
        return End_Search(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Search(AsyncCallback callback, object state, FlexSearch.Api.SearchQuery query)
      #else
      public void send_Search(FlexSearch.Api.SearchQuery query)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Search", TMessageType.Call, seqid_));
        Search_args args = new Search_args();
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FlexSearch.Api.SearchResults recv_Search()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Search_result result = new Search_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Search failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchWithFlatResults(AsyncCallback callback, object state, FlexSearch.Api.SearchQuery query)
      {
        return send_SearchWithFlatResults(callback, state, query);
      }

      public List<Dictionary<string, string>> End_SearchWithFlatResults(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchWithFlatResults();
      }

      #endif

      public List<Dictionary<string, string>> SearchWithFlatResults(FlexSearch.Api.SearchQuery query)
      {
        #if !SILVERLIGHT
        send_SearchWithFlatResults(query);
        return recv_SearchWithFlatResults();

        #else
        var asyncResult = Begin_SearchWithFlatResults(null, null, query);
        return End_SearchWithFlatResults(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchWithFlatResults(AsyncCallback callback, object state, FlexSearch.Api.SearchQuery query)
      #else
      public void send_SearchWithFlatResults(FlexSearch.Api.SearchQuery query)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SearchWithFlatResults", TMessageType.Call, seqid_));
        SearchWithFlatResults_args args = new SearchWithFlatResults_args();
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Dictionary<string, string>> recv_SearchWithFlatResults()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchWithFlatResults_result result = new SearchWithFlatResults_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchWithFlatResults failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDocument(AsyncCallback callback, object state, string indexName, string documentId)
      {
        return send_GetDocument(callback, state, indexName, documentId);
      }

      public Dictionary<string, string> End_GetDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDocument();
      }

      #endif

      public Dictionary<string, string> GetDocument(string indexName, string documentId)
      {
        #if !SILVERLIGHT
        send_GetDocument(indexName, documentId);
        return recv_GetDocument();

        #else
        var asyncResult = Begin_GetDocument(null, null, indexName, documentId);
        return End_GetDocument(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDocument(AsyncCallback callback, object state, string indexName, string documentId)
      #else
      public void send_GetDocument(string indexName, string documentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDocument", TMessageType.Call, seqid_));
        GetDocument_args args = new GetDocument_args();
        args.IndexName = indexName;
        args.DocumentId = documentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_GetDocument()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDocument_result result = new GetDocument_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDocument failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetDocuments(AsyncCallback callback, object state, string indexName)
      {
        return send_GetDocuments(callback, state, indexName);
      }

      public List<Dictionary<string, string>> End_GetDocuments(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetDocuments();
      }

      #endif

      public List<Dictionary<string, string>> GetDocuments(string indexName)
      {
        #if !SILVERLIGHT
        send_GetDocuments(indexName);
        return recv_GetDocuments();

        #else
        var asyncResult = Begin_GetDocuments(null, null, indexName);
        return End_GetDocuments(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetDocuments(AsyncCallback callback, object state, string indexName)
      #else
      public void send_GetDocuments(string indexName)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetDocuments", TMessageType.Call, seqid_));
        GetDocuments_args args = new GetDocuments_args();
        args.IndexName = indexName;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Dictionary<string, string>> recv_GetDocuments()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetDocuments_result result = new GetDocuments_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ex) {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDocuments failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddOrUpdateDocument(AsyncCallback callback, object state, string indexName, string documentId, Dictionary<string, string> document)
      {
        return send_AddOrUpdateDocument(callback, state, indexName, documentId, document);
      }

      public void End_AddOrUpdateDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddOrUpdateDocument();
      }

      #endif

      public void AddOrUpdateDocument(string indexName, string documentId, Dictionary<string, string> document)
      {
        #if !SILVERLIGHT
        send_AddOrUpdateDocument(indexName, documentId, document);
        recv_AddOrUpdateDocument();

        #else
        var asyncResult = Begin_AddOrUpdateDocument(null, null, indexName, documentId, document);
        End_AddOrUpdateDocument(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddOrUpdateDocument(AsyncCallback callback, object state, string indexName, string documentId, Dictionary<string, string> document)
      #else
      public void send_AddOrUpdateDocument(string indexName, string documentId, Dictionary<string, string> document)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddOrUpdateDocument", TMessageType.Call, seqid_));
        AddOrUpdateDocument_args args = new AddOrUpdateDocument_args();
        args.IndexName = indexName;
        args.DocumentId = documentId;
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AddOrUpdateDocument()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddOrUpdateDocument_result result = new AddOrUpdateDocument_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddDocument(AsyncCallback callback, object state, string indexName, string documentId, Dictionary<string, string> document)
      {
        return send_AddDocument(callback, state, indexName, documentId, document);
      }

      public void End_AddDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddDocument();
      }

      #endif

      public void AddDocument(string indexName, string documentId, Dictionary<string, string> document)
      {
        #if !SILVERLIGHT
        send_AddDocument(indexName, documentId, document);
        recv_AddDocument();

        #else
        var asyncResult = Begin_AddDocument(null, null, indexName, documentId, document);
        End_AddDocument(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddDocument(AsyncCallback callback, object state, string indexName, string documentId, Dictionary<string, string> document)
      #else
      public void send_AddDocument(string indexName, string documentId, Dictionary<string, string> document)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddDocument", TMessageType.Call, seqid_));
        AddDocument_args args = new AddDocument_args();
        args.IndexName = indexName;
        args.DocumentId = documentId;
        args.Document = document;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AddDocument()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddDocument_result result = new AddDocument_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DeleteDocument(AsyncCallback callback, object state, string indexName, string documentId)
      {
        return send_DeleteDocument(callback, state, indexName, documentId);
      }

      public void End_DeleteDocument(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DeleteDocument();
      }

      #endif

      public void DeleteDocument(string indexName, string documentId)
      {
        #if !SILVERLIGHT
        send_DeleteDocument(indexName, documentId);
        recv_DeleteDocument();

        #else
        var asyncResult = Begin_DeleteDocument(null, null, indexName, documentId);
        End_DeleteDocument(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DeleteDocument(AsyncCallback callback, object state, string indexName, string documentId)
      #else
      public void send_DeleteDocument(string indexName, string documentId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DeleteDocument", TMessageType.Call, seqid_));
        DeleteDocument_args args = new DeleteDocument_args();
        args.IndexName = indexName;
        args.DocumentId = documentId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_DeleteDocument()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DeleteDocument_result result = new DeleteDocument_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ex) {
          throw result.Ex;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetIndex"] = GetIndex_Process;
        processMap_["UpdateIndex"] = UpdateIndex_Process;
        processMap_["DeleteIndex"] = DeleteIndex_Process;
        processMap_["AddIndex"] = AddIndex_Process;
        processMap_["GetAllIndex"] = GetAllIndex_Process;
        processMap_["IndexExists"] = IndexExists_Process;
        processMap_["GetIndexStatus"] = GetIndexStatus_Process;
        processMap_["OpenIndex"] = OpenIndex_Process;
        processMap_["CloseIndex"] = CloseIndex_Process;
        processMap_["GetJob"] = GetJob_Process;
        processMap_["Search"] = Search_Process;
        processMap_["SearchWithFlatResults"] = SearchWithFlatResults_Process;
        processMap_["GetDocument"] = GetDocument_Process;
        processMap_["GetDocuments"] = GetDocuments_Process;
        processMap_["AddOrUpdateDocument"] = AddOrUpdateDocument_Process;
        processMap_["AddDocument"] = AddDocument_Process;
        processMap_["DeleteDocument"] = DeleteDocument_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetIndex_args args = new GetIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetIndex_result result = new GetIndex_result();
        try {
          result.Success = iface_.GetIndex(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateIndex_args args = new UpdateIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateIndex_result result = new UpdateIndex_result();
        try {
          iface_.UpdateIndex(args.Index);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("UpdateIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteIndex_args args = new DeleteIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteIndex_result result = new DeleteIndex_result();
        try {
          iface_.DeleteIndex(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("DeleteIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddIndex_args args = new AddIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddIndex_result result = new AddIndex_result();
        try {
          iface_.AddIndex(args.Index);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("AddIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetAllIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetAllIndex_args args = new GetAllIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetAllIndex_result result = new GetAllIndex_result();
        try {
          result.Success = iface_.GetAllIndex();
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetAllIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IndexExists_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IndexExists_args args = new IndexExists_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IndexExists_result result = new IndexExists_result();
        try {
          result.Success = iface_.IndexExists(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("IndexExists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetIndexStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetIndexStatus_args args = new GetIndexStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetIndexStatus_result result = new GetIndexStatus_result();
        try {
          result.Success = iface_.GetIndexStatus(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetIndexStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void OpenIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        OpenIndex_args args = new OpenIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        OpenIndex_result result = new OpenIndex_result();
        try {
          iface_.OpenIndex(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("OpenIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CloseIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CloseIndex_args args = new CloseIndex_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CloseIndex_result result = new CloseIndex_result();
        try {
          iface_.CloseIndex(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("CloseIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetJob_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetJob_args args = new GetJob_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetJob_result result = new GetJob_result();
        try {
          result.Success = iface_.GetJob(args.JobId);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetJob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Search_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Search_args args = new Search_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Search_result result = new Search_result();
        try {
          result.Success = iface_.Search(args.Query);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("Search", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SearchWithFlatResults_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchWithFlatResults_args args = new SearchWithFlatResults_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchWithFlatResults_result result = new SearchWithFlatResults_result();
        try {
          result.Success = iface_.SearchWithFlatResults(args.Query);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("SearchWithFlatResults", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDocument_args args = new GetDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDocument_result result = new GetDocument_result();
        try {
          result.Success = iface_.GetDocument(args.IndexName, args.DocumentId);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetDocument", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetDocuments_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetDocuments_args args = new GetDocuments_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetDocuments_result result = new GetDocuments_result();
        try {
          result.Success = iface_.GetDocuments(args.IndexName);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("GetDocuments", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddOrUpdateDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddOrUpdateDocument_args args = new AddOrUpdateDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddOrUpdateDocument_result result = new AddOrUpdateDocument_result();
        try {
          iface_.AddOrUpdateDocument(args.IndexName, args.DocumentId, args.Document);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("AddOrUpdateDocument", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddDocument_args args = new AddDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddDocument_result result = new AddDocument_result();
        try {
          iface_.AddDocument(args.IndexName, args.DocumentId, args.Document);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("AddDocument", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DeleteDocument_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DeleteDocument_args args = new DeleteDocument_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DeleteDocument_result result = new DeleteDocument_result();
        try {
          iface_.DeleteDocument(args.IndexName, args.DocumentId);
        } catch (FlexSearch.Api.Message.InvalidOperation ex) {
          result.Ex = ex;
        }
        oprot.WriteMessageBegin(new TMessage("DeleteDocument", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetIndex_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 1)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public GetIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIndex_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetIndex_result : TBase
    {
      private FlexSearch.Api.Index _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 2)]
      public FlexSearch.Api.Index Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 3)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FlexSearch.Api.Index();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIndex_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateIndex_args : TBase
    {
      private FlexSearch.Api.Index _index;

      [DataMember(Order = 4)]
      public FlexSearch.Api.Index Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool index;
      }

      public UpdateIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Index = new FlexSearch.Api.Index();
                Index.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Index != null && __isset.index) {
          field.Name = "index";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Index.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.index == other.__isset.index) && ((!__isset.index) || (System.Object.Equals(Index, other.Index))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.index ? 0 : (Index.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateIndex_args(");
        sb.Append("Index: ");
        sb.Append(Index== null ? "<null>" : Index.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class UpdateIndex_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 5)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public UpdateIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as UpdateIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateIndex_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteIndex_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 6)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public DeleteIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteIndex_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteIndex_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 7)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public DeleteIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteIndex_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddIndex_args : TBase
    {
      private FlexSearch.Api.Index _index;

      [DataMember(Order = 8)]
      public FlexSearch.Api.Index Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool index;
      }

      public AddIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Index = new FlexSearch.Api.Index();
                Index.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Index != null && __isset.index) {
          field.Name = "index";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Index.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.index == other.__isset.index) && ((!__isset.index) || (System.Object.Equals(Index, other.Index))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.index ? 0 : (Index.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddIndex_args(");
        sb.Append("Index: ");
        sb.Append(Index== null ? "<null>" : Index.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddIndex_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 9)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public AddIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddIndex_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetAllIndex_args : TBase
    {

      public GetAllIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllIndex_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetAllIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllIndex_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetAllIndex_result : TBase
    {
      private List<FlexSearch.Api.Index> _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 10)]
      public List<FlexSearch.Api.Index> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 11)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetAllIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FlexSearch.Api.Index>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    FlexSearch.Api.Index _elem2 = new FlexSearch.Api.Index();
                    _elem2 = new FlexSearch.Api.Index();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetAllIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FlexSearch.Api.Index _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetAllIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetAllIndex_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class IndexExists_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 12)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public IndexExists_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IndexExists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as IndexExists_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IndexExists_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class IndexExists_result : TBase
    {
      private bool _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 13)]
      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 14)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public IndexExists_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IndexExists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as IndexExists_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("IndexExists_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetIndexStatus_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 15)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public GetIndexStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIndexStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetIndexStatus_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIndexStatus_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetIndexStatus_result : TBase
    {
      private FlexSearch.Api.IndexState _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      /// <summary>
      /// 
      /// <seealso cref="FlexSearch.Api.IndexState"/>
      /// </summary>
      [DataMember(Order = 16)]
      public FlexSearch.Api.IndexState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 17)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetIndexStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (FlexSearch.Api.IndexState)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetIndexStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetIndexStatus_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetIndexStatus_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class OpenIndex_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 18)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public OpenIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("OpenIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as OpenIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("OpenIndex_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class OpenIndex_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 19)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public OpenIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("OpenIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as OpenIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("OpenIndex_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class CloseIndex_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 20)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public CloseIndex_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CloseIndex_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as CloseIndex_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CloseIndex_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class CloseIndex_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 21)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public CloseIndex_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CloseIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as CloseIndex_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CloseIndex_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetJob_args : TBase
    {
      private string _jobId;

      [DataMember(Order = 22)]
      public string JobId
      {
        get
        {
          return _jobId;
        }
        set
        {
          __isset.jobId = true;
          this._jobId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool jobId;
      }

      public GetJob_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                JobId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetJob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (JobId != null && __isset.jobId) {
          field.Name = "jobId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JobId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetJob_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.jobId == other.__isset.jobId) && ((!__isset.jobId) || (System.Object.Equals(JobId, other.JobId))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.jobId ? 0 : (JobId.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetJob_args(");
        sb.Append("JobId: ");
        sb.Append(JobId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetJob_result : TBase
    {
      private FlexSearch.Api.Job _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 23)]
      public FlexSearch.Api.Job Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 24)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetJob_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FlexSearch.Api.Job();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetJob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetJob_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetJob_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class Search_args : TBase
    {
      private FlexSearch.Api.SearchQuery _query;

      [DataMember(Order = 25)]
      public FlexSearch.Api.SearchQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool query;
      }

      public Search_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query = new FlexSearch.Api.SearchQuery();
                Query.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Search_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as Search_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.query == other.__isset.query) && ((!__isset.query) || (System.Object.Equals(Query, other.Query))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.query ? 0 : (Query.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Search_args(");
        sb.Append("Query: ");
        sb.Append(Query== null ? "<null>" : Query.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class Search_result : TBase
    {
      private FlexSearch.Api.SearchResults _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 26)]
      public FlexSearch.Api.SearchResults Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 27)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public Search_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FlexSearch.Api.SearchResults();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Search_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as Search_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Search_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class SearchWithFlatResults_args : TBase
    {
      private FlexSearch.Api.SearchQuery _query;

      [DataMember(Order = 28)]
      public FlexSearch.Api.SearchQuery Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool query;
      }

      public SearchWithFlatResults_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query = new FlexSearch.Api.SearchQuery();
                Query.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SearchWithFlatResults_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as SearchWithFlatResults_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.query == other.__isset.query) && ((!__isset.query) || (System.Object.Equals(Query, other.Query))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.query ? 0 : (Query.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SearchWithFlatResults_args(");
        sb.Append("Query: ");
        sb.Append(Query== null ? "<null>" : Query.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class SearchWithFlatResults_result : TBase
    {
      private List<Dictionary<string, string>> _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 29)]
      public List<Dictionary<string, string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 30)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public SearchWithFlatResults_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Dictionary<string, string>>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Dictionary<string, string> _elem6 = new Dictionary<string, string>();
                    {
                      _elem6 = new Dictionary<string, string>();
                      TMap _map7 = iprot.ReadMapBegin();
                      for( int _i8 = 0; _i8 < _map7.Count; ++_i8)
                      {
                        string _key9;
                        string _val10;
                        _key9 = iprot.ReadString();
                        _val10 = iprot.ReadString();
                        _elem6[_key9] = _val10;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("SearchWithFlatResults_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Map, Success.Count));
              foreach (Dictionary<string, string> _iter11 in Success)
              {
                {
                  oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter11.Count));
                  foreach (string _iter12 in _iter11.Keys)
                  {
                    oprot.WriteString(_iter12);
                    oprot.WriteString(_iter11[_iter12]);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as SearchWithFlatResults_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("SearchWithFlatResults_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetDocument_args : TBase
    {
      private string _indexName;
      private string _documentId;

      [DataMember(Order = 31)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember(Order = 32)]
      public string DocumentId
      {
        get
        {
          return _documentId;
        }
        set
        {
          __isset.documentId = true;
          this._documentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool documentId;
      }

      public GetDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DocumentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (DocumentId != null && __isset.documentId) {
          field.Name = "documentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DocumentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.documentId == other.__isset.documentId) && ((!__isset.documentId) || (System.Object.Equals(DocumentId, other.DocumentId))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.documentId ? 0 : (DocumentId.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDocument_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",DocumentId: ");
        sb.Append(DocumentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetDocument_result : TBase
    {
      private Dictionary<string, string> _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 33)]
      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 34)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetDocument_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map13 = iprot.ReadMapBegin();
                  for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                  {
                    string _key15;
                    string _val16;
                    _key15 = iprot.ReadString();
                    _val16 = iprot.ReadString();
                    Success[_key15] = _val16;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDocument_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter17 in Success.Keys)
              {
                oprot.WriteString(_iter17);
                oprot.WriteString(Success[_iter17]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetDocument_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDocument_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetDocuments_args : TBase
    {
      private string _indexName;

      [DataMember(Order = 35)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
      }

      public GetDocuments_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDocuments_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetDocuments_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDocuments_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class GetDocuments_result : TBase
    {
      private List<Dictionary<string, string>> _success;
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 36)]
      public List<Dictionary<string, string>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      [DataMember(Order = 37)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool success;
        public bool ex;
      }

      public GetDocuments_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Dictionary<string, string>>();
                  TList _list18 = iprot.ReadListBegin();
                  for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    Dictionary<string, string> _elem20 = new Dictionary<string, string>();
                    {
                      _elem20 = new Dictionary<string, string>();
                      TMap _map21 = iprot.ReadMapBegin();
                      for( int _i22 = 0; _i22 < _map21.Count; ++_i22)
                      {
                        string _key23;
                        string _val24;
                        _key23 = iprot.ReadString();
                        _val24 = iprot.ReadString();
                        _elem20[_key23] = _val24;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success.Add(_elem20);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetDocuments_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Map, Success.Count));
              foreach (Dictionary<string, string> _iter25 in Success)
              {
                {
                  oprot.WriteMapBegin(new TMap(TType.String, TType.String, _iter25.Count));
                  foreach (string _iter26 in _iter25.Keys)
                  {
                    oprot.WriteString(_iter26);
                    oprot.WriteString(_iter25[_iter26]);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as GetDocuments_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetDocuments_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddOrUpdateDocument_args : TBase
    {
      private string _indexName;
      private string _documentId;
      private Dictionary<string, string> _document;

      [DataMember(Order = 38)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember(Order = 39)]
      public string DocumentId
      {
        get
        {
          return _documentId;
        }
        set
        {
          __isset.documentId = true;
          this._documentId = value;
        }
      }

      [DataMember(Order = 40)]
      public Dictionary<string, string> Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool documentId;
        public bool document;
      }

      public AddOrUpdateDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DocumentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Document = new Dictionary<string, string>();
                  TMap _map27 = iprot.ReadMapBegin();
                  for( int _i28 = 0; _i28 < _map27.Count; ++_i28)
                  {
                    string _key29;
                    string _val30;
                    _key29 = iprot.ReadString();
                    _val30 = iprot.ReadString();
                    Document[_key29] = _val30;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddOrUpdateDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (DocumentId != null && __isset.documentId) {
          field.Name = "documentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DocumentId);
          oprot.WriteFieldEnd();
        }
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Document.Count));
            foreach (string _iter31 in Document.Keys)
            {
              oprot.WriteString(_iter31);
              oprot.WriteString(Document[_iter31]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddOrUpdateDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.documentId == other.__isset.documentId) && ((!__isset.documentId) || (System.Object.Equals(DocumentId, other.DocumentId))))
          && ((__isset.document == other.__isset.document) && ((!__isset.document) || (TCollections.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.documentId ? 0 : (DocumentId.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (TCollections.GetHashCode(Document)));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddOrUpdateDocument_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",DocumentId: ");
        sb.Append(DocumentId);
        sb.Append(",Document: ");
        sb.Append(Document);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddOrUpdateDocument_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 41)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public AddOrUpdateDocument_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddOrUpdateDocument_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddOrUpdateDocument_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddOrUpdateDocument_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddDocument_args : TBase
    {
      private string _indexName;
      private string _documentId;
      private Dictionary<string, string> _document;

      [DataMember(Order = 42)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember(Order = 43)]
      public string DocumentId
      {
        get
        {
          return _documentId;
        }
        set
        {
          __isset.documentId = true;
          this._documentId = value;
        }
      }

      [DataMember(Order = 44)]
      public Dictionary<string, string> Document
      {
        get
        {
          return _document;
        }
        set
        {
          __isset.document = true;
          this._document = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool documentId;
        public bool document;
      }

      public AddDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DocumentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  Document = new Dictionary<string, string>();
                  TMap _map32 = iprot.ReadMapBegin();
                  for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                  {
                    string _key34;
                    string _val35;
                    _key34 = iprot.ReadString();
                    _val35 = iprot.ReadString();
                    Document[_key34] = _val35;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (DocumentId != null && __isset.documentId) {
          field.Name = "documentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DocumentId);
          oprot.WriteFieldEnd();
        }
        if (Document != null && __isset.document) {
          field.Name = "document";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Document.Count));
            foreach (string _iter36 in Document.Keys)
            {
              oprot.WriteString(_iter36);
              oprot.WriteString(Document[_iter36]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.documentId == other.__isset.documentId) && ((!__isset.documentId) || (System.Object.Equals(DocumentId, other.DocumentId))))
          && ((__isset.document == other.__isset.document) && ((!__isset.document) || (TCollections.Equals(Document, other.Document))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.documentId ? 0 : (DocumentId.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.document ? 0 : (TCollections.GetHashCode(Document)));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDocument_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",DocumentId: ");
        sb.Append(DocumentId);
        sb.Append(",Document: ");
        sb.Append(Document);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class AddDocument_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 45)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public AddDocument_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddDocument_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as AddDocument_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddDocument_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteDocument_args : TBase
    {
      private string _indexName;
      private string _documentId;

      [DataMember(Order = 46)]
      public string IndexName
      {
        get
        {
          return _indexName;
        }
        set
        {
          __isset.indexName = true;
          this._indexName = value;
        }
      }

      [DataMember(Order = 47)]
      public string DocumentId
      {
        get
        {
          return _documentId;
        }
        set
        {
          __isset.documentId = true;
          this._documentId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool indexName;
        public bool documentId;
      }

      public DeleteDocument_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                IndexName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DocumentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteDocument_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IndexName != null && __isset.indexName) {
          field.Name = "indexName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IndexName);
          oprot.WriteFieldEnd();
        }
        if (DocumentId != null && __isset.documentId) {
          field.Name = "documentId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DocumentId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteDocument_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.indexName == other.__isset.indexName) && ((!__isset.indexName) || (System.Object.Equals(IndexName, other.IndexName))))
          && ((__isset.documentId == other.__isset.documentId) && ((!__isset.documentId) || (System.Object.Equals(DocumentId, other.DocumentId))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.indexName ? 0 : (IndexName.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.documentId ? 0 : (DocumentId.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteDocument_args(");
        sb.Append("IndexName: ");
        sb.Append(IndexName);
        sb.Append(",DocumentId: ");
        sb.Append(DocumentId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract(Namespace="")]
    public partial class DeleteDocument_result : TBase
    {
      private FlexSearch.Api.Message.InvalidOperation _ex;

      [DataMember(Order = 48)]
      public FlexSearch.Api.Message.InvalidOperation Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      [DataContract]
      public struct Isset {
        public bool ex;
      }

      public DeleteDocument_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Ex = new FlexSearch.Api.Message.InvalidOperation();
                Ex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DeleteDocument_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ex) {
          if (Ex != null) {
            field.Name = "Ex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Ex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override bool Equals(object that) {
        var other = that as DeleteDocument_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.ex ? 0 : (Ex.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DeleteDocument_result(");
        sb.Append("Ex: ");
        sb.Append(Ex== null ? "<null>" : Ex.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
