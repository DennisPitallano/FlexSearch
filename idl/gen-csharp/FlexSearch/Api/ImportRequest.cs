/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class ImportRequest : TBase
  {
    private string _Id;
    private Dictionary<string, string> _Parameters;
    private bool _ForceCreate;
    private string _JobId;

    [DataMember(Order = 1)]
    public string Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    [DataMember(Order = 2)]
    public Dictionary<string, string> Parameters
    {
      get
      {
        return _Parameters;
      }
      set
      {
        __isset.Parameters = true;
        this._Parameters = value;
      }
    }

    [DataMember(Order = 3)]
    public bool ForceCreate
    {
      get
      {
        return _ForceCreate;
      }
      set
      {
        __isset.ForceCreate = true;
        this._ForceCreate = value;
      }
    }

    [DataMember(Order = 4)]
    public string JobId
    {
      get
      {
        return _JobId;
      }
      set
      {
        __isset.JobId = true;
        this._JobId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool Id;
      public bool Parameters;
      public bool ForceCreate;
      public bool JobId;
    }

    public ImportRequest() {
      this._Parameters = new Dictionary<string, string>();
      this.__isset.Parameters = true;
      this._ForceCreate = false;
      this.__isset.ForceCreate = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Parameters = new Dictionary<string, string>();
                TMap _map60 = iprot.ReadMapBegin();
                for( int _i61 = 0; _i61 < _map60.Count; ++_i61)
                {
                  string _key62;
                  string _val63;
                  _key62 = iprot.ReadString();
                  _val63 = iprot.ReadString();
                  Parameters[_key62] = _val63;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              ForceCreate = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              JobId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ImportRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.Id) {
        field.Name = "Id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Parameters != null && __isset.Parameters) {
        field.Name = "Parameters";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
          foreach (string _iter64 in Parameters.Keys)
          {
            oprot.WriteString(_iter64);
            oprot.WriteString(Parameters[_iter64]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.ForceCreate) {
        field.Name = "ForceCreate";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ForceCreate);
        oprot.WriteFieldEnd();
      }
      if (JobId != null && __isset.JobId) {
        field.Name = "JobId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JobId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as ImportRequest;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Id == other.__isset.Id) && ((!__isset.Id) || (System.Object.Equals(Id, other.Id))))
        && ((__isset.Parameters == other.__isset.Parameters) && ((!__isset.Parameters) || (TCollections.Equals(Parameters, other.Parameters))))
        && ((__isset.ForceCreate == other.__isset.ForceCreate) && ((!__isset.ForceCreate) || (System.Object.Equals(ForceCreate, other.ForceCreate))))
        && ((__isset.JobId == other.__isset.JobId) && ((!__isset.JobId) || (System.Object.Equals(JobId, other.JobId))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.Id ? 0 : (Id.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Parameters ? 0 : (TCollections.GetHashCode(Parameters)));
        hashcode = (hashcode * 397) ^ (!__isset.ForceCreate ? 0 : (ForceCreate.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.JobId ? 0 : (JobId.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ImportRequest(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Parameters: ");
      sb.Append(Parameters);
      sb.Append(",ForceCreate: ");
      sb.Append(ForceCreate);
      sb.Append(",JobId: ");
      sb.Append(JobId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
