/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

namespace FlexSearch.Api.Message
{
  public static class MessageConstants
  {
    public static OperationMessage INDEX_NOT_FOUND = new OperationMessage();
    public static OperationMessage INDEX_ALREADY_EXISTS = new OperationMessage();
    public static OperationMessage INDEX_SHOULD_BE_OFFLINE = new OperationMessage();
    public static OperationMessage INDEX_IS_OFFLINE = new OperationMessage();
    public static OperationMessage INDEX_IS_OPENING = new OperationMessage();
    public static OperationMessage INDEX_REGISTERATION_MISSING = new OperationMessage();
    public static OperationMessage INDEXING_DOCUMENT_ID_MISSING = new OperationMessage();
    public static OperationMessage ERROR_OPENING_INDEXWRITER = new OperationMessage();
    public static OperationMessage ERROR_ADDING_INDEX_STATUS = new OperationMessage();
    public static OperationMessage INDEX_IS_ALREADY_ONLINE = new OperationMessage();
    public static OperationMessage INDEX_IS_ALREADY_OFFLINE = new OperationMessage();
    public static OperationMessage PROPERTY_CANNOT_BE_EMPTY = new OperationMessage();
    public static OperationMessage REGEX_NOT_MATCHED = new OperationMessage();
    public static OperationMessage VALUE_NOT_IN = new OperationMessage();
    public static OperationMessage VALUE_ONLY_IN = new OperationMessage();
    public static OperationMessage GREATER_THAN_EQUAL_TO = new OperationMessage();
    public static OperationMessage GREATER_THAN = new OperationMessage();
    public static OperationMessage LESS_THAN_EQUAL_TO = new OperationMessage();
    public static OperationMessage LESS_THAN = new OperationMessage();
    public static OperationMessage FILTER_CANNOT_BE_INITIALIZED = new OperationMessage();
    public static OperationMessage FILTER_NOT_FOUND = new OperationMessage();
    public static OperationMessage TOKENIZER_CANNOT_BE_INITIALIZED = new OperationMessage();
    public static OperationMessage TOKENIZER_NOT_FOUND = new OperationMessage();
    public static OperationMessage ATLEAST_ONE_FILTER_REQUIRED = new OperationMessage();
    public static OperationMessage UNKNOWN_FIELD_TYPE = new OperationMessage();
    public static OperationMessage SCRIPT_NOT_FOUND = new OperationMessage();
    public static OperationMessage ANALYZERS_NOT_SUPPORTED_FOR_FIELD_TYPE = new OperationMessage();
    public static OperationMessage UNKNOWN_SCRIPT_TYPE = new OperationMessage();
    public static OperationMessage ANALYZER_NOT_FOUND = new OperationMessage();
    public static OperationMessage SCRIPT_CANT_BE_COMPILED = new OperationMessage();
    public static OperationMessage MODULE_NOT_FOUND = new OperationMessage();
    public static OperationMessage INVALID_QUERY_TYPE = new OperationMessage();
    public static OperationMessage INVALID_FIELD_NAME = new OperationMessage();
    public static OperationMessage MISSING_FIELD_VALUE = new OperationMessage();
    public static OperationMessage MISSING_FIELD_VALUE_1 = new OperationMessage();
    public static OperationMessage UNKNOWN_MISSING_VALUE_OPTION = new OperationMessage();
    public static OperationMessage QUERYSTRING_PARSING_ERROR = new OperationMessage();
    public static OperationMessage DATA_CANNOT_BE_PARSED = new OperationMessage();
    public static OperationMessage QUERY_OPERATOR_FIELD_TYPE_NOT_SUPPORTED = new OperationMessage();
    static MessageConstants()
    {
      INDEX_NOT_FOUND.DeveloperMessage = "The requested index does not exist.";
      INDEX_NOT_FOUND.UserMessage = "The requested index does not exist.";
      INDEX_NOT_FOUND.ErrorCode = 1000;
      INDEX_ALREADY_EXISTS.DeveloperMessage = "The requested index already exist.";
      INDEX_ALREADY_EXISTS.UserMessage = "The requested index already exist.";
      INDEX_ALREADY_EXISTS.ErrorCode = 1002;
      INDEX_SHOULD_BE_OFFLINE.DeveloperMessage = "Index should be made offline before attempting to update index settings.";
      INDEX_SHOULD_BE_OFFLINE.UserMessage = "Index should be made offline before attempting the operation.";
      INDEX_SHOULD_BE_OFFLINE.ErrorCode = 1003;
      INDEX_IS_OFFLINE.DeveloperMessage = "The index is offline or closing. Please bring the index online to use it.";
      INDEX_IS_OFFLINE.UserMessage = "The index is offline or closing. Please bring the index online to use it.";
      INDEX_IS_OFFLINE.ErrorCode = 1004;
      INDEX_IS_OPENING.DeveloperMessage = "The index is in opening state. Please wait some time before making another request.";
      INDEX_IS_OPENING.UserMessage = "The index is in opening state. Please wait some time before making another request.";
      INDEX_IS_OPENING.ErrorCode = 1005;
      INDEX_REGISTERATION_MISSING.DeveloperMessage = "Registeration information associated with the index is missing.";
      INDEX_REGISTERATION_MISSING.UserMessage = "Registeration information associated with the index is missing.";
      INDEX_REGISTERATION_MISSING.ErrorCode = 1006;
      INDEXING_DOCUMENT_ID_MISSING.DeveloperMessage = "Document id missing.";
      INDEXING_DOCUMENT_ID_MISSING.UserMessage = "Document Id is required in order to index an document. Please specify _documentid and submit the document for indexing.";
      INDEXING_DOCUMENT_ID_MISSING.ErrorCode = 1007;
      ERROR_OPENING_INDEXWRITER.DeveloperMessage = "{To be populated by the developer code}";
      ERROR_OPENING_INDEXWRITER.UserMessage = "Unable to open index writer.";
      ERROR_OPENING_INDEXWRITER.ErrorCode = 1008;
      ERROR_ADDING_INDEX_STATUS.DeveloperMessage = "Unable to set the index status.";
      ERROR_ADDING_INDEX_STATUS.UserMessage = "Unable to set the index status.";
      ERROR_ADDING_INDEX_STATUS.ErrorCode = 1009;
      INDEX_IS_ALREADY_ONLINE.DeveloperMessage = "The index is already online or opening at the moment.";
      INDEX_IS_ALREADY_ONLINE.UserMessage = "The index is already online or opening at the moment.";
      INDEX_IS_ALREADY_ONLINE.ErrorCode = 1010;
      INDEX_IS_ALREADY_OFFLINE.DeveloperMessage = "The index is already offline or closing at the moment.";
      INDEX_IS_ALREADY_OFFLINE.UserMessage = "The index is already offline or closing at the moment.";
      INDEX_IS_ALREADY_OFFLINE.ErrorCode = 1011;
      PROPERTY_CANNOT_BE_EMPTY.DeveloperMessage = "Field:{propertyName} cannot be empty.";
      PROPERTY_CANNOT_BE_EMPTY.UserMessage = "Field:{propertyName} cannot be empty.";
      PROPERTY_CANNOT_BE_EMPTY.ErrorCode = 2001;
      REGEX_NOT_MATCHED.DeveloperMessage = "Field:{propertyName} does not match the regex pattern {value}.";
      REGEX_NOT_MATCHED.UserMessage = "Field:{propertyName} does not match the regex pattern {value}.";
      REGEX_NOT_MATCHED.ErrorCode = 2002;
      VALUE_NOT_IN.DeveloperMessage = "Field:{propertyName} cannot have the following as valid values: {value}.";
      VALUE_NOT_IN.UserMessage = "Field:{propertyName} cannot have the following as valid values: {value}.";
      VALUE_NOT_IN.ErrorCode = 2003;
      VALUE_ONLY_IN.DeveloperMessage = "Field:{propertyName} can only have the following as valid values: {value}.";
      VALUE_ONLY_IN.UserMessage = "Field:{propertyName} can only have the following as valid values: {value}.";
      VALUE_ONLY_IN.ErrorCode = 2004;
      GREATER_THAN_EQUAL_TO.DeveloperMessage = "Field:{propertyName} should be greater than or equal to: {value}.";
      GREATER_THAN_EQUAL_TO.UserMessage = "Field:{propertyName} should be greater than or equal to: {value}.";
      GREATER_THAN_EQUAL_TO.ErrorCode = 2005;
      GREATER_THAN.DeveloperMessage = "Field:{propertyName} should be greater than: {value}.";
      GREATER_THAN.UserMessage = "Field:{propertyName} should be greater than: {value}.";
      GREATER_THAN.ErrorCode = 2006;
      LESS_THAN_EQUAL_TO.DeveloperMessage = "Field:{propertyName} should be less than or equal to: {value}.";
      LESS_THAN_EQUAL_TO.UserMessage = "Field:{propertyName} should be less than or equal to: {value}.";
      LESS_THAN_EQUAL_TO.ErrorCode = 2005;
      LESS_THAN.DeveloperMessage = "Field:{propertyName} should be less than: {value}.";
      LESS_THAN.UserMessage = "Field:{propertyName} should be less than: {value}.";
      LESS_THAN.ErrorCode = 2006;
      FILTER_CANNOT_BE_INITIALIZED.DeveloperMessage = "Filter:{propertyName} cannot be initialized: {value}";
      FILTER_CANNOT_BE_INITIALIZED.UserMessage = "Filter:{propertyName} cannot be initialized.";
      FILTER_CANNOT_BE_INITIALIZED.ErrorCode = 2007;
      FILTER_NOT_FOUND.DeveloperMessage = "Filter:{propertyName} not found.";
      FILTER_NOT_FOUND.UserMessage = "Filter:{propertyName} not found.";
      FILTER_NOT_FOUND.ErrorCode = 2008;
      TOKENIZER_CANNOT_BE_INITIALIZED.DeveloperMessage = "Tokenizer:{propertyName} cannot be initialized: {value}";
      TOKENIZER_CANNOT_BE_INITIALIZED.UserMessage = "Tokenizer:{propertyName} cannot be initialized.";
      TOKENIZER_CANNOT_BE_INITIALIZED.ErrorCode = 2009;
      TOKENIZER_NOT_FOUND.DeveloperMessage = "Tokenizer:{propertyName} not found.";
      TOKENIZER_NOT_FOUND.UserMessage = "Tokenizer:{propertyName} not found.";
      TOKENIZER_NOT_FOUND.ErrorCode = 2010;
      ATLEAST_ONE_FILTER_REQUIRED.DeveloperMessage = "Atleast one filter should be specified for a custom analyzer.";
      ATLEAST_ONE_FILTER_REQUIRED.UserMessage = "Atleast one filter should be specified for a custom analyzer.";
      ATLEAST_ONE_FILTER_REQUIRED.ErrorCode = 2011;
      UNKNOWN_FIELD_TYPE.DeveloperMessage = "Unsupported field type specified in the Field Properties.";
      UNKNOWN_FIELD_TYPE.UserMessage = "Unsupported field type specified in the Field Properties.";
      UNKNOWN_FIELD_TYPE.ErrorCode = 2012;
      SCRIPT_NOT_FOUND.DeveloperMessage = "Script{propertyName} not found.";
      SCRIPT_NOT_FOUND.UserMessage = "Script{propertyName} not found.";
      SCRIPT_NOT_FOUND.ErrorCode = 2013;
      ANALYZERS_NOT_SUPPORTED_FOR_FIELD_TYPE.DeveloperMessage = "FieldType:{propertyName} does not support custom analyzer.";
      ANALYZERS_NOT_SUPPORTED_FOR_FIELD_TYPE.UserMessage = "FieldType:{propertyName} does not support custom analyzer.";
      ANALYZERS_NOT_SUPPORTED_FOR_FIELD_TYPE.ErrorCode = 2014;
      UNKNOWN_SCRIPT_TYPE.DeveloperMessage = "ScriptType:{propertyName} is not supported.";
      UNKNOWN_SCRIPT_TYPE.UserMessage = "ScriptType:{propertyName} is not supported.";
      UNKNOWN_SCRIPT_TYPE.ErrorCode = 2015;
      ANALYZER_NOT_FOUND.DeveloperMessage = "Analyzer:{propertyName} not found.";
      ANALYZER_NOT_FOUND.UserMessage = "Analyzer:{propertyName} not found.";
      ANALYZER_NOT_FOUND.ErrorCode = 2016;
      SCRIPT_CANT_BE_COMPILED.DeveloperMessage = "Script:{propertyName} cannot be compiled. {value}";
      SCRIPT_CANT_BE_COMPILED.UserMessage = "Script:{propertyName} cannot be compiled.";
      SCRIPT_CANT_BE_COMPILED.ErrorCode = 3000;
      MODULE_NOT_FOUND.DeveloperMessage = "Module:{propertyName} can not be found. Please make sure all the compiled dependecies are accessible by the server.";
      MODULE_NOT_FOUND.UserMessage = "Module:{propertyName} can not be found. Please make sure all the compiled dependecies are accessible by the server.";
      MODULE_NOT_FOUND.ErrorCode = 4000;
      INVALID_QUERY_TYPE.DeveloperMessage = "QueryType:{propertyName} can not be found. Please make sure all the compiled dependecies are accessible by the server.";
      INVALID_QUERY_TYPE.UserMessage = "QueryType:{propertyName} can not be found. Please make sure all the compiled dependecies are accessible by the server.";
      INVALID_QUERY_TYPE.ErrorCode = 5000;
      INVALID_FIELD_NAME.DeveloperMessage = "FieldName:{propertyName} can not be found.";
      INVALID_FIELD_NAME.UserMessage = "FieldName:{propertyName} can not be found.";
      INVALID_FIELD_NAME.ErrorCode = 5001;
      MISSING_FIELD_VALUE.DeveloperMessage = "Search value canot be empty.";
      MISSING_FIELD_VALUE.UserMessage = "Search value canot be empty. No value provided for the field.";
      MISSING_FIELD_VALUE.ErrorCode = 5002;
      MISSING_FIELD_VALUE_1.DeveloperMessage = "FieldName:{propertyName} No value provided for the field.";
      MISSING_FIELD_VALUE_1.UserMessage = "FieldName:{propertyName} No value provided for the field.";
      MISSING_FIELD_VALUE_1.ErrorCode = 5003;
      UNKNOWN_MISSING_VALUE_OPTION.DeveloperMessage = "MissingValueOption:{propertyName} is not supported.";
      UNKNOWN_MISSING_VALUE_OPTION.UserMessage = "MissingValueOption:{propertyName} is not supported.";
      UNKNOWN_MISSING_VALUE_OPTION.ErrorCode = 5004;
      QUERYSTRING_PARSING_ERROR.DeveloperMessage = "Unable to parse the passed query string. {value}";
      QUERYSTRING_PARSING_ERROR.UserMessage = "Unable to parse the passed query string.";
      QUERYSTRING_PARSING_ERROR.ErrorCode = 5005;
      DATA_CANNOT_BE_PARSED.DeveloperMessage = "Field:{propertyName} The passed data cannot be parsed. Check if the passed data is in the correct format required by the query operator";
      DATA_CANNOT_BE_PARSED.UserMessage = "Field:{propertyName} The passed data cannot be parsed. Check if the passed data is in the correct format required by the query operator";
      DATA_CANNOT_BE_PARSED.ErrorCode = 5006;
      QUERY_OPERATOR_FIELD_TYPE_NOT_SUPPORTED.DeveloperMessage = "Field:{propertyName} Query operator does not support the passed field type.";
      QUERY_OPERATOR_FIELD_TYPE_NOT_SUPPORTED.UserMessage = "Field:{propertyName} Query operator does not support the passed field type.";
      QUERY_OPERATOR_FIELD_TYPE_NOT_SUPPORTED.ErrorCode = 5007;
    }
  }
}
