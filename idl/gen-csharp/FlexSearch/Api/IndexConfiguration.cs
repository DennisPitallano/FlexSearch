/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class IndexConfiguration : TBase
  {
    private int _CommitTimeSec;
    private DirectoryType _DirectoryType;
    private int _DefaultWriteLockTimeout;
    private int _RamBufferSizeMb;
    private int _RefreshTimeMilliSec;
    private IndexVersion _IndexVersion;

    [DataMember(Order = 1)]
    public int CommitTimeSec
    {
      get
      {
        return _CommitTimeSec;
      }
      set
      {
        __isset.CommitTimeSec = true;
        this._CommitTimeSec = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="DirectoryType"/>
    /// </summary>
    [DataMember(Order = 2)]
    public DirectoryType DirectoryType
    {
      get
      {
        return _DirectoryType;
      }
      set
      {
        __isset.DirectoryType = true;
        this._DirectoryType = value;
      }
    }

    [DataMember(Order = 3)]
    public int DefaultWriteLockTimeout
    {
      get
      {
        return _DefaultWriteLockTimeout;
      }
      set
      {
        __isset.DefaultWriteLockTimeout = true;
        this._DefaultWriteLockTimeout = value;
      }
    }

    [DataMember(Order = 4)]
    public int RamBufferSizeMb
    {
      get
      {
        return _RamBufferSizeMb;
      }
      set
      {
        __isset.RamBufferSizeMb = true;
        this._RamBufferSizeMb = value;
      }
    }

    [DataMember(Order = 5)]
    public int RefreshTimeMilliSec
    {
      get
      {
        return _RefreshTimeMilliSec;
      }
      set
      {
        __isset.RefreshTimeMilliSec = true;
        this._RefreshTimeMilliSec = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="IndexVersion"/>
    /// </summary>
    [DataMember(Order = 6)]
    public IndexVersion IndexVersion
    {
      get
      {
        return _IndexVersion;
      }
      set
      {
        __isset.IndexVersion = true;
        this._IndexVersion = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool CommitTimeSec;
      public bool DirectoryType;
      public bool DefaultWriteLockTimeout;
      public bool RamBufferSizeMb;
      public bool RefreshTimeMilliSec;
      public bool IndexVersion;
    }

    public IndexConfiguration() {
      this._CommitTimeSec = 60;
      this.__isset.CommitTimeSec = true;
      this._DirectoryType = DirectoryType.MemoryMapped;
      this.__isset.DirectoryType = true;
      this._DefaultWriteLockTimeout = 1000;
      this.__isset.DefaultWriteLockTimeout = true;
      this._RamBufferSizeMb = 100;
      this.__isset.RamBufferSizeMb = true;
      this._RefreshTimeMilliSec = 25;
      this.__isset.RefreshTimeMilliSec = true;
      this._IndexVersion = IndexVersion.Lucene46;
      this.__isset.IndexVersion = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              CommitTimeSec = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DirectoryType = (DirectoryType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              DefaultWriteLockTimeout = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RamBufferSizeMb = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              RefreshTimeMilliSec = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              IndexVersion = (IndexVersion)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("IndexConfiguration");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.CommitTimeSec) {
        field.Name = "CommitTimeSec";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CommitTimeSec);
        oprot.WriteFieldEnd();
      }
      if (__isset.DirectoryType) {
        field.Name = "DirectoryType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)DirectoryType);
        oprot.WriteFieldEnd();
      }
      if (__isset.DefaultWriteLockTimeout) {
        field.Name = "DefaultWriteLockTimeout";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DefaultWriteLockTimeout);
        oprot.WriteFieldEnd();
      }
      if (__isset.RamBufferSizeMb) {
        field.Name = "RamBufferSizeMb";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RamBufferSizeMb);
        oprot.WriteFieldEnd();
      }
      if (__isset.RefreshTimeMilliSec) {
        field.Name = "RefreshTimeMilliSec";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RefreshTimeMilliSec);
        oprot.WriteFieldEnd();
      }
      if (__isset.IndexVersion) {
        field.Name = "IndexVersion";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)IndexVersion);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as IndexConfiguration;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.CommitTimeSec == other.__isset.CommitTimeSec) && ((!__isset.CommitTimeSec) || (System.Object.Equals(CommitTimeSec, other.CommitTimeSec))))
        && ((__isset.DirectoryType == other.__isset.DirectoryType) && ((!__isset.DirectoryType) || (System.Object.Equals(DirectoryType, other.DirectoryType))))
        && ((__isset.DefaultWriteLockTimeout == other.__isset.DefaultWriteLockTimeout) && ((!__isset.DefaultWriteLockTimeout) || (System.Object.Equals(DefaultWriteLockTimeout, other.DefaultWriteLockTimeout))))
        && ((__isset.RamBufferSizeMb == other.__isset.RamBufferSizeMb) && ((!__isset.RamBufferSizeMb) || (System.Object.Equals(RamBufferSizeMb, other.RamBufferSizeMb))))
        && ((__isset.RefreshTimeMilliSec == other.__isset.RefreshTimeMilliSec) && ((!__isset.RefreshTimeMilliSec) || (System.Object.Equals(RefreshTimeMilliSec, other.RefreshTimeMilliSec))))
        && ((__isset.IndexVersion == other.__isset.IndexVersion) && ((!__isset.IndexVersion) || (System.Object.Equals(IndexVersion, other.IndexVersion))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.CommitTimeSec ? 0 : (CommitTimeSec.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.DirectoryType ? 0 : (DirectoryType.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.DefaultWriteLockTimeout ? 0 : (DefaultWriteLockTimeout.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.RamBufferSizeMb ? 0 : (RamBufferSizeMb.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.RefreshTimeMilliSec ? 0 : (RefreshTimeMilliSec.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.IndexVersion ? 0 : (IndexVersion.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("IndexConfiguration(");
      sb.Append("CommitTimeSec: ");
      sb.Append(CommitTimeSec);
      sb.Append(",DirectoryType: ");
      sb.Append(DirectoryType);
      sb.Append(",DefaultWriteLockTimeout: ");
      sb.Append(DefaultWriteLockTimeout);
      sb.Append(",RamBufferSizeMb: ");
      sb.Append(RamBufferSizeMb);
      sb.Append(",RefreshTimeMilliSec: ");
      sb.Append(RefreshTimeMilliSec);
      sb.Append(",IndexVersion: ");
      sb.Append(IndexVersion);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
