/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace FlexSearch.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class ShardConfiguration : TBase
  {
    private int _ShardCount;

    [DataMember(Order = 1)]
    public int ShardCount
    {
      get
      {
        return _ShardCount;
      }
      set
      {
        __isset.ShardCount = true;
        this._ShardCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      public bool ShardCount;
    }

    public ShardConfiguration() {
      this._ShardCount = 1;
      this.__isset.ShardCount = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ShardCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ShardConfiguration");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ShardCount) {
        field.Name = "ShardCount";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ShardCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override bool Equals(object that) {
      var other = that as ShardConfiguration;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ShardCount == other.__isset.ShardCount) && ((!__isset.ShardCount) || (System.Object.Equals(ShardCount, other.ShardCount))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.ShardCount ? 0 : (ShardCount.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ShardConfiguration(");
      sb.Append("ShardCount: ");
      sb.Append(ShardCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
